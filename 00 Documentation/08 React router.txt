
- SPAs need router
- We only have one page (index.html)
- Small apps can use conditionals, instead of complex apps
- React Router is most popular

+++++++++++Installation+++++++++++

https://reacttraining.com/react-router/

1. install React router
cd client-app
npm install react-router-dom

2. import BrowserRouter as a namned import
- <Router> is the low level interface for all Routers

inside index.tsx:
import { BrowserRouter } from "react-router-dom";
!!Error - Could not find a declaration file for module 'react-router-dom'. 
'c:/Users/User/source/repos/U-NetCoreReact/client-app/node_modules/react-router-dom/index.js' implicitly has an 'any' type.
  Try `npm install @types/react-router-dom` if it exists or add a new declaration (.d.ts) file containing `declare module 
  'react-router-dom';`ts(7016)

- install @types
npm install @types/react-router-dom

3. Surround <App /> in <BrowserRouter> in:
ReactDOM.render(
  <BrowserRouter>
    <App />
  </BrowserRouter>,
  document.getElementById("root")
);

+++++++++++Setup Initial Routes+++++++++++
! No Route Configuration file like Angular
! For Home Route "/" we have to set exact keyword since other routes that contain "/..."  will trigger Home

1. Create home folder and HomePage.tsx
/src.features/home/HomePage.tsx

return (
    <Container style={{ marginTop: "7em" }}>
      <h1>Home page</h1>
    </Container>
  );

2. Setup Routes inside App.tsx
! Import from react-router-dom and not from auto-import react-router

import { Route } from "react-router-dom";
...
return (
	...
	<Route exact path="/" component={HomePage} />
	<Route path="/activities" component={ActivityDashboard} />
	<Route path="/createActivity" component={ActivityForm} />
	...

3. Create Links
inside NavBar.tsx:
<Menu.Item header as={NavLink} exact to="/">
<Menu.Item name="Activities" as={NavLink} to="/activities" />
<Menu.Item as={NavLink} to="/createActivity">

4. We remove the onClick method from the Create Activity Button
<Menu.Item as={NavLink} to="/createActivity">
    <Button
    onClick={activityStore.openCreateForm}
    positive
    content="Create Activity"
    />
</Menu.Item>

+++++++++++Route/Link for Activity Details+++++++++++

1. Create Route for Activity Details
<Route path="/activities/:id" component={ActivityDetails} />

2. Handle Button in ActivityList.tsx
- replace onClick with Links
From:
onClick={() => selectActivity(activity.id)}
To:
as={Link} to={`/activities/${activity.id}`}

3. Create Api for getting activity details
- 2 Scenarios: Get Activity from inmside teh Activity List page, get Activity from outsidie (browesr url, bookmark..)
- Create helper method getActivity and check if we already have something in activityRegistry (coming from Actviity List page)
- check if undefined (as per mobX, observable returns undefined when not found) then we load from Api

getActivity = (id: string) =>
{
	return this.activityRegistry.get(id);
}

4. rename selectedActivity to activity
!! fix rename issues

5. Create loadActivity method
- Check getActivity if it exist in activityRegistry
- if not load from Api

@action loadActivity = async (id: string) => {
    let activity = this.getActivity(id);
    if (activity) {
      this.activity = activity;
    } else {
      this.loadingInitial = true;
      try {
        activity = await agent.Activities.details(id);
        runInAction("getting activity", () => {
          this.activity = activity;
          this.loadingInitial = false;
        });
      } catch (error) {
        console.log(error);
      }
    }
  };

6. Add exact to Activities Route
<Route exact path="/activities" component={ActivityDashboard} />

7. Check properties available for ActivityDetails
- f12, components tab
- search for ActivityDetails

- history
-- push, goBack, goForward
- location
-- pathname, search
- match 
-- params
--- id

8. Use params to access id parameter inside ActivityDetails
- declare type parameter RouteComponentProps so we can access properties
  history: H.History;
  location: H.Location<S>;
  match: match<Params>; ...
- Create interface DetailParams to specify name of parameter (:id) we have set in Route
- Add DetailsParams as type parameter for RouteComponentProps<...>

const ActivityDetails: React.FC<RouteComponentProps<DetailParams>> = ({
  match
}) => {

9. Use loadActivity Api to get Activity by id
- Create useEffect hook
- pass dependency loadActivity, if we leave of the call to loadActivity will run everytime

  useEffect(() => {
    loadActivity(match.params.id);
  }, [loadActivity]);

10. Create a loading Component
const {
	...
	loadingInitial
} = activityStore;
...
if (loadingInitial) return <LoadingComponent content="Loading activity..." />;

!!!Error in ActivityDashboard
11. Remove right side content in ActivityDashbaord
<GridColumn width="6">
    <h2>Activity Filters</h2>
</GridColumn>

12. Error src={`/assets/categoryImages/${activity!.category}.jpg`}
- This is because our ActivityStore has the activity set to:
@observable activity: IActivity | undefined;
- add conditional
if (loadingInitial || !activity) return <LoadingComponent content="Loading activity..." />;


+++++++++++Handle Cancel Button, Navigating in AcitvityDetails+++++++++++
1. Destructure hisotry in Props
const ActivityDetails: React.FC<RouteComponentProps<DetailParams>> = ({
  match,
  history
}) => {

2. Handle Cancel Button
<Button
    onClick={() => history.push("/activities")}
    basic
    color="grey"
    content="Cancel"
    ></Button>

+++++++++++Handle Edit Button+++++++++++
1. Modify ActivityForm Route to include Edit Activity
<Route
    path={["/createActivity", "/manage/:id"]}
    component={ActivityForm}
/>

2. Use in Edit Button, replace onClick={() => openEditForm(activity!.id)}
<Button
    as={Link}
    to={`/manage/${activity.id}`}
    basic
    color="blue"
    content="Edit"
    ></Button>

3. In ActivityForm, remove activity Props as we are going to get the activity from ActivityStore and Route Parameters
from:
const ActivityForm: React.FC<IProps> = ({ activity: initialFormState }) => {
to:


interface DetailParams {
  id: string;
}

const ActivityForm: React.FC<RouteComponentProps<DetailParams>> = ({
  match
}) => {
...
  const {
    ...
    activity: initialFormState,
	loadActivity
  } = activityStore;

4. Load activity by using hook effect
useEffect(() => {
    if (match.params.id) {
      loadActivity(match.params.id);
    }
  });

+++++++++++Handle Create Button coming inside an Edit Form+++++++++++
!! Issue, form populates when coming from Edit Button but not in browser (url, etc..)
- useEffect runs synchronously, we have no opportunity to set state with retrieved activity
- initializeForm is running before loadActivity had a chance to complete
- We need to adjust form initializer

5. Set blank, local state in the useState
const [activity, setActivity] = useState<IActivity>({
    id: "",
    title: "",
    category: "",
    description: "",
    date: "",
    city: "",
    venue: ""
  });

!remove initialFormState then setActivity inside .then() in the loadActivity returned promise

useEffect(() => {
	if (match.params.id) {
		loadActivity(match.params.id).then(
		() => initialFormState && setActivity(initialFormState)
		);
	}
});

!!! Issues, Create Activity Button from inside Form does not clear loaded activity
- We have to clear the activity back to 'undefined'
- Use Cleanup inside useEffect

6. Create new action in Store
- change activity's type to | null
@observable activity: IActivity | null = null;
!! Fix issues

7. Create @action clearActivity
@action clearActivity = () => {
	this.activity = null;
};

8. Call clearActivity() inside ActivityForm's useEffect Cleanup
...
  const {
    ...
    clearActivity
  } = activityStore;
  ...

  useEffect(() => {
    ...
    return () => {
      clearActivity();
    };
  });


!!! Still does not work properly

+++++++++++Handle Create Button using Fully Uncontrolled with a key+++++++++++

Note on options:
Previously we use UNSAFE_componentWillReceiveProps
https://reactjs.org/docs/react-component.html#unsafe_componentwillreceiveprops

We will try this option:
- If you used componentWillReceiveProps to “reset” some state when a prop changes, consider either making a component fully 
controlled or fully uncontrolled with a key instead.

Fully Uncontrolled with a key
https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html#recommendation-fully-uncontrolled-component-with-a-key

1. Use withRouter higher-order component
- withRouter, higher-order component and wrap App as parameter
- This is so we have access to "location" prop

export default withRouter(observer(App));

2. Destructure the location prop in App
const App: React.FC<RouteComponentProps> = ({ location }) => {

3. Add key to ActivityForm Route using the location prop
<Route
    key={location.key}
    path={["/createActivity", "/manage/:id"]}
    component={ActivityForm}
/>






