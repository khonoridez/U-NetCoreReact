

1. Set observables for activities data and loading flag

class ActivityStore {
  @observable activities: IActivity[] = [];
  @observable loadingInitial = false;  
}

2. Get logic from useEffect() inside App.tsx and move inside ActivityStore as an @action

@action loadActivities = () => {
    this.loadingInitial = true;
    agent.Activities.list()
      .then(activities => {
        activities.forEach(activity => {
          activity.date = activity.date.split(".")[0];
          this.activities.push(activity);
        });
      })
      .finally(() => (this.loadingInitial = false));
  };

3. Use in App.tsx
https://overreacted.io/a-complete-guide-to-useeffect/

  useEffect(() => {
    activityStore.loadActivities();
  }, [activityStore]);

  ...

if (activityStore.loadingInitial)
    return <LoadingComponent content="Loading Activities ..." />;

	...

<ActivityDashboard
          activities={activityStore.activities}
		  ...

4. Make the component as observer
!!Note on observables
- If we have observables, it is important that the components obesrving we have to tell them to be an observer
- Turn these components to observers
- If not we will see the initial state of mobX and not the changes inside our components
- observer is a higher-order component, taking another Component as parameter
- then it returns a new component with extra functionalities, in this case to Observe observables

App.tsx
import {observer} from 'mobx-react-lite';
...
export default observer(App);

ActivityDashboard.tsx
export default observer(ActivityDashboard);

ActivityList.tsx
export default observer(ActivityList);

++++++++Use Store in Child Components++++++++

1. Set the Observables in Store
@observable selectedActivity: IActivity | undefined;
@observable editMode = false;
...
@action selectActivity = (id: string) => {
    this.selectedActivity = this.activities.find(a => a.id === id);
    this.editMode = false;
  };

2. Use in ActivityDashboard
...
}) => {
const activityStore = useContext(ActivityStore);
...

3. Destructure properties that we will be using
...
const { editMode, selectedActivity } = activityStore;

!!Fix errors, remove duplicate declaration

4. Use in ActivityDetails
...
const activityStore = useContext(ActivityStore);
const { selectedActivity: activity } = activityStore;
...

export default observer(ActivityDetails);

! We have to set the View Button in ActivityList via selectActivity (which actually came form App)

5. Use in ActivityList
const activityStore = useContext(ActivityStore);
const { activities, selectActivity } = activityStore;

!!Fix errors, remove duplicate declaration

++++++++Create Activity++++++++
1. Create action in Store for createActivity

@action createActivity = async (activity: IActivity) => {
	this.submitting = true;
	try {
		await agent.Activities.create(activity);
		this.activities.push(activity);
		this.editMode = false;
		this.submitting = false;
	} catch (error) {
		console.log(error);
		this.submitting = false;
	}
};

2. Create action for openCreateForm
@action openCreateForm = () => {
	this.editMode = true;
	this.selectedActivity = undefined;
};

3. Use openCreateForm in NavBar "Create" button
const activityStore = useContext(ActivityStore);
...
<Button
    onClick={activityStore.openCreateForm}
    positive
    content="Create Activity"
    />
...
export default observer(NavBar);

!!!Remove unusued and duplicate variables

4. Use in ActivityForm
}) => {
  const activityStore = useContext(ActivityStore);
  const { createActivity } = activityStore;

!!!Remove unusued and duplicate variables

++++++++Edit Activity++++++++

1. Create action in Store
@action editActivity = async (activity: IActivity) => {
    this.submitting = true;
    try {
      await agent.Activities.update(activity);
      this.activityRegistry.set(activity.id, activity);
      this.selectedActivity = activity;
      this.editMode = false;
      this.submitting = false;
    } catch (error) {
      console.log(error);
      this.submitting = false;
    }
  };

2. Use in EditForm, we also need to destructure and include submitting
const ActivityForm: React.FC<IProps> = ({
  setEditMode,
  activity: initialFormState
}) => {
  const activityStore = useContext(ActivityStore);
  const { createActivity, editActivity, submitting } = activityStore;

!! Clean up unused variables from parent components

3. Create openEditForm

@action openEditForm = (id: string) => {
    this.editMode = true;
    this.selectedActivity = this.activityRegistry.get(id);
  };

4. Use in ActivityDetails to handle Edit Button
const ActivityDetails: React.FC<IProps> = ({
  setEditMode,
  setSelectedActivity
}) => {
  const activityStore = useContext(ActivityStore);
  const { selectedActivity: activity, openEditForm } = activityStore;
...
 <Button
	onClick={() => openEditForm(activity!.id)}

!! Clean up unused variables from parent components

5. Create cancelSelectedActivity and cancelFormOpen
@action cancelSelectedActivity = () => {
    this.selectedActivity = undefined;
  };

@action cancelFormOpen = () => {
    this.editMode = false;
  };

6. Use in the Cancel button on ActivityDetails
const {
    selectedActivity: activity,
    openEditForm,
    cancelSelectedActivity
  } = activityStore;
...
<Button
    onClick={() => cancelSelectedActivity()}
    basic
    color="grey"
    content="Cancel"
></Button>

7. Use in Cancel Button inside Form
<Button
	onClick={() => cancelFormOpen()}

!!!Clean up unused variables

++++++++Delete Activity++++++++

1. Create observable for the loading button feature
