
++++++++++Navigation Bar++++++++++

1. Create NavBar.tsx
under features/nav.NavBar.tsx

2. type 'rafc' to get snippet from dsznajder.es7-react-js-snippets
Creates a React Arrow Function Component with ES7 module system (ES7 React/Redux/GraphQL/React-Native snippets)

3. Get script from Semantic UI for inverted menu and copy inside return
const NavBar = () => {
  return (
    <Menu inverted>
      <Menu.Item
        name="home"
        active={activeItem === "home"}
        onClick={this.handleItemClick}
      />
      <Menu.Item
        name="messages"
        active={activeItem === "messages"}
        onClick={this.handleItemClick}
      />
      <Menu.Item
        name="friends"
        active={activeItem === "friends"}
        onClick={this.handleItemClick}
      />
    </Menu>
  );
};

4. remove 1 letter from Menu to show import option
import { Menu } from "semantic-ui-react";

5. Remove unsused properties on the Menu items
active={activeItem === "home"}
onClick={this.handleItemClick}

6. Use NavBar in App.tsx
...
 return (
    <div>
      <NavBar />
...

7. Add conatiner from Semantic Ui as placeholder for content

8. Add folder assets
public/assets

9. Copy all images from Course Assets/Images to assets folder

++++++++++Style Components++++++++++

1. Inline Style

Set style as object (camelCase) and not as a css class
<img
	src="/assets/logo.png"
	alt="logo"
	style={{ marginRight: "10px" }}
/>

2. Css file style
Styles located at src/app/layout/styles.css

- type s_5.6 for this course style's snippet

3. Wrap List to a Container and set inline style margin
<Container style={{ marginTop: "7em" }}>
	<List>
		{activities.map(activity => (
		<List.Item key={activity.id}>{activity.title}</List.Item>
		))}
	</List>
</Container>

4. We can change the wrapping div to a React Fragment
!!Note on wrapping div on App's return method
- We cannot pass siblings in jsx
- We have to return a single element, in this case div
- Changing this wrapper div so that it would not reflect in the webpage elements
import React, {... Fragment } from "react";
return (
    <Fragment>
      ...
    </Fragment>
  );

++++++++++Style Components++++++++++

1. Create new file
src/features/activity/dashboard/ActivityDashboard.tsx

2. Create React Functional Component
- type rafc for React Arrow Function snippet

3. Create Grid and GridColumn, Copy the List items from App.tsx inside GridColumn

const ActivityDashboard = () => {
  return (
    <Grid>
      <GridColumn width="10">
        <List>
          {activities.map(activity => (
            <List.Item key={activity.id}>{activity.title}</List.Item>
          ))}
        </List>
      </GridColumn>
    </Grid>
  );
};

++++++++++Passing Values to Components++++++++++

4. Pass activities value to ActivityDashboard.tsx from App.tsx
In App.tsx:
  return (
    <Fragment>
      <NavBar />
      <Container style={{ marginTop: "7em" }}>
        <ActivityDashboard activities={activities} />
      </Container>
    </Fragment>
  );

5. Catch in ActivityDashboard.tsx
5.1 Create interface
interface IProps {
  activities: IActivity[];
}

5.2 Give FC (Functional Component) type for ActivityDashboard and specify parameter (in thsi example named props)
const ActivityDashboard: React.FC<IProps> = props => {

5.3 Use props
return (
    <Grid>
      <GridColumn width="10">
        <List>
          {props.activities.map(activity => (
            <List.Item key={activity.id}>{activity.title}</List.Item>
          ))}
        </List>
      </GridColumn>
    </Grid>
  );

5.4 We can destructure the property so we do not need to specify props and just access activities directly
const ActivityDashboard: React.FC<IProps> = ({ activities }) => {
...
{activities.map(activity => (
	<List.Item key={activity.id}>{activity.title}</List.Item>
))}

