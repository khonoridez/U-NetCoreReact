
+++++++++++Activity Details in List+++++++++++
- Break down details into own components

1. Create file ActivityListItem.tsx
- src/features/activities/dashboard/ActivityListItem.tsx

2. Copy code from ActivityList to ActivityListItem
return (
    <Item key={activity.id}>
      ...
    </Item>
  );

!! Fix missing imports

3. Remove Delete Button (Delete was for exercise purposes only)

4. Pass in Activity from ActivityList
- pass in a key
{activitiesByDate.map(activity => (
    <ActivityListItem key={activity.id} activity={activity} />
))}

5. Catch in ActivityList
- We do not need and IProps, we can import type IActivity and then set the Type parameter as a destructured Props
...
import { IActivity } from "../../../app/models/activity";
...
const ActivityListItem: React.FC<{ activity: IActivity }> = ({ activity }) => {
...


+++++++++++Sort, Group by Date+++++++++++
- Construct this.activityRegistry.values() to group
- use reduce method
 @computed get activitiesByDate() {
    return Array.from(this.activityRegistry.values()).sort(
      (a, b) => Date.parse(a.date) - Date.parse(b.date)
    );
  }

- unique date will act as key

1. Create helper method
groupActivitiesByDate(activities: IActivity[]) {
	const sortedActivities = activities.sort(
		(a, b) => Date.parse(a.date) - Date.parse(b.date)
	);
	return sortedActivities;
}

2. Use and replace in activitiesByDate

@computed get activitiesByDate() {
    return this.groupActivitiesByDate(
      Array.from(this.activityRegistry.values())
    );
  }

3. Replace sortedActivities to return Object.entries
- We will be having date as the key and value will be an array of Activities
- use Array.reduce(..)
note: const date = activity.date.split("T")[0];
- Get the string date without the time

Object.entries(
      sortedActivities.reduce(
        (activities, activity) => {
          const date = activity.date.split("T")[0];
          activities[date] = activities[date]
            ? [...activities[date], activity]
            : [activity];
          return activities;
        },
        {} as { [key: string]: IActivity[] }
      )
    );
- Check and compare the date, if it is a matching date add it to array
activities[date] = activities[date] ? [...activities[date], activity] : [activity];

- If match, Spread the array of activities and add activity to array
 [...activities[date], activity]

- If not then we just add the activity
[activity]

- Give the initial value empty object a type
{} as { [key: string]: IActivity[] }


4. Fix errors caused to use this new grouped activities
- loop each date, then loop through activities for each date

5. ActivityList.tsx place inside Fragment
<Fragment>
...      
</Fragment>

6. Loop through activities by date and map with format from Object.entries(...{ [key: string]: IActivity[] }
{activitiesByDate.map(([group, activities]) => (...

7. Place in anopther Fragment with key the List Item and set {group} (the date) as the key
{activitiesByDate.map(([group, activities]) => (
	<Fragment key={group}>
		<Label size="large" color="blue">
		{group}
		</Label>
		<Segment clearing>
		<Item.Group divided>
			{activities.map(activity => (
			<ActivityListItem key={activity.id} activity={activity} />
			))}
		</Item.Group>
		</Segment>
	</Fragment>

- Loop through the [..,activities and pass to ListItems
 
 +++++++++++Styling List Item+++++++++++
 ActivityListItem.tsx
 1. Add Segment.Group
 https://semantic-ui.com/elements/segment.html
 - Remove key={..}
 ...
 <Segment.Group>
	<Segment>
        <Item>
		...
- Enclose Item in Item.Group
...
 <Item.Group>
	<Item>
	...

- Place icons
<Segment>
    <Icon name="clock" /> {activity.date}
    <Icon name="marker" /> {activity.venue}, {activity.city}
</Segment>

- Remove <Segment> on ActivityList
!! clean unused imports


+++++++++++Styling Deatils Page+++++++++++
Header Component, Info Component, Chat Component, Sidebar Component

1. Create file ActivityDetailedHeader.tsx, ActivityDetailedInfo.tsx, ActivityDetailedChat.tsx, ActivityDetailedSidebar.tsx
- inside /src/features/activities/details/

2. ActivityDetails, create Grid
<Grid>
    <Grid.Column width={10}>
    <ActivityDetailedHeader />
    <ActivityDetailedInfo />
    <ActivityDetailedChat />
    </Grid.Column>
    <Grid.Column width={6}>
    <ActivityDetailedSidebar />
    </Grid.Column>
</Grid>

! remove unused imports

+++++++++++Header Component+++++++++++
- Pass Activity down to Header

1. Get snippet s_9.6.1 for ActivityDetailedHeader return body
2. On Visual Studio Code, lightbulb at the right> Add all missing imports
3. Get snippet s_9.6.2 for image style declarations
4. Attach style to objects
<Image
    ...
    style={activityImageStyle}
/>
...
<Segment basic style={activityImageTextStyle}>
- set 'basic' = no styles

5. Pass activity as a prop from ActivityDetails to ActivityHeader
<ActivityDetailedHeader activity={activity} />
...
- Catch in ActivityHeader
const ActivityDetailedHeader: React.FC<{ activity: IActivity }> = ({ activity }) => {

6. Set ActivityHeader as observer since we are using an observable (activity)
export default observer(ActivityDetailedHeader);

7. Set values inside template

+++++++++++Info Component+++++++++++
1. Get snippet s_9.6.1 for ActivityDetailedInfo return body
2. VS Code Light bulb, Add all missing imports
3. Grid system for icon spacing
<Grid>
    <Grid.Column width={1}>
    <Icon size="large" color="teal" name="info" />
    </Grid.Column>
    <Grid.Column width={15}>
    <p>{"description"}</p>
    </Grid.Column>
</Grid>
4. Pass activity as a prop from ActivityDetails to ActivityDetailedInfo
<ActivityDetailedInfo activity={activity} />
...
const ActivityDetailedInfo: React.FC<{ activity: IActivity }> = ({ activity }) => {
...
export default observer(ActivityDetailedInfo);

5. Set values inside template

+++++++++++Chat Component+++++++++++
- Semantic UI Comment Component
https://semantic-ui.com/views/comment.html

1. Get snippet s_9.8.1 for ActivityDetailedChat return body
! no functionality yet

+++++++++++Sidebar Component+++++++++++
1. Get snippet s_9.9.1 for ActivityDetailedSidebar return body
- Segment for Header
- Segment for list of Users
! no functionality yet
