Creating Entities

Domain
1. Create Entity
> Value.cs
> We will be using EF (Code first)
> property with name of "Id" will automatically be the primary key

Persistence
1. Create DbContext class
> public class DataContext : DbContext
> Install packages (must be same as netcore version)
- open command shell (ctrl+shift+p)
- Nuget Package Manager: Add Package
- Microsoft.EntityFrameworkCore 3.0.0
- Microsoft.EntityFrameworkCore.Sqlite 3.0.0
- Add to Persistence Project
- Restore pop-up window

2. Create constructor and 1st DbSet Property
public class DataContext : DbContext
{
    public DataContext(DbContextOptions options) : base(options)
    {
    }

    public DbSet<Value> Values { get; set; }
}

3. Add the context as a Service
- Inject this to various parts in the application
API Project > Startup.cs > ConfigureServices()

using Microsoft.EntityFrameworkCore;
...
services.AddDbContext<DataContext>(opt =>
{
	opt.UseSqlite(Configuration.GetConnectionString("DefaultConnection"));
});

!This will work since we installed Microsoft.EntityFrameworkCore.Sqlite 3.0.0 via npm

4. Specify ConnectionStrings under appsettings.json (using sqlite)
"ConnectionStrings": {
    "DefaultConnection": "Data source=reactivities.db"
  },

...

Migrations

1. using cli (vs code terminal)
!specify -p is the persistence project
!specify -s is the startup project
> dotnet ef migrations add InitialCreate -p Persistence/ -s API/

2. Migrations folder will be created

3. Create Database
- for help
> dotnet ef -h
- updates to the latest migration if no migration is specified
> dotnet ef database update

- Another apporoach, update the database whenever the application starts up
a. Under Program.cs > Main()
- We will add the Run() method later
From: CreateHostBuilder(args).Build().Run();
To: var host = CreateHostBuilder(args).Build();

b. set using to inject DbContext
- We just need to check this once
...
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;
using Persistence;
...
using (var scope = host.Services.CreateScope())
{
	var services = scope.ServiceProvider;

	try
	{
		var context = services.GetRequiredService<DataContext>();
		context.Database.Migrate(); 
		// Applies any pending migrations for the context to the database. Will create if not exist
	}

!! This check happens everytime the program starts up

Final:
...
var host = CreateHostBuilder(args).Build();

using (var scope = host.Services.CreateScope())
{
	var services = scope.ServiceProvider;

	try
	{
		var context = services.GetRequiredService<DataContext>();
		context.Database.Migrate();
	}
	catch (Exception ex)
	{
		var logger = services.GetRequiredService<ILogger<Program>>();
		logger.LogError(ex, "An error occured during migration");
	}
}

host.Run();

c. Run:
- This should create our database and run our application

- Only works inside the context of the startup project, error in solution level even with -p switch
> dotnet watch run

d. View database
- A reactivities.db file will be created under root of API Project
- View > Command Palette
- type sqlite / open database
- Sqlite Explorer show up with the tables under

...

SEEDING DATABASE

1. Under DataContext.cs
- Add method
protected override void OnModelCreating(ModelBuilder builder)
{
    builder.Entity<Value>().HasData(
        new Value { Id = 1, Name = "Value 101" },
        new Value { Id = 2, Name = "Value 102" },
        new Value { Id = 3, Name = "Value 103" });
}

2. Create new migration for seed
-p for datacontext project
-s startup project

> dotnet ef migrations add SeedValues -p Persistence/ -s API/

