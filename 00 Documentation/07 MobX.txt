
+++++++++++++Centralized Store+++++++++++++

Move states outside of Components and put into centralized Stores via MobX

MobX Api (State Management)
1. Observable
2. Action
3. Computed
4. Reaction

5. Observer
- Create higher order component to make our React Components Observers of our Store

+++++++++++++Observable+++++++++++++
- Connect Observers to Store

import {observable} from 'mobx';

class DemoStore
{
	@observable firstName = 'Bob';
	@observable lastName = 'Smith';
}

export default createContext(new DemoStore());
...

+++++++++++++Action+++++++++++++
- Use to modify the observables
- mutating state, not possible in Redux
- anything that has sidieeffects, we  have to decorate with @action

@action setFirstName = (name: string) => {
	this.firstName = name
}

+++++++++++++Computed+++++++++++++
- similiar to formulas in spreadsheets
- highly optimized


@computed get fullName()
{
	return this.firstName + ' ' + this.lastName;
}

+++++++++++++Reaction+++++++++++++
- tell the reaction which observable we are interested in tracking
- if observable changes then call the reaction()

constructor()
{
	reaction(
		() => this.firstName,
		(firstName) => console.log(firstName)
	);
}
...

+++++++++++++React Context+++++++++++++
- Where do we store the Stores, how do we access the Stores
- if some data has to be accessible by React Components without passing via props
- accesible by many components at different nesting levels
- Storing our Store in React Context we can access it anywhere

import {createContext} from 'react';
...
export default createContext(new DemoStore());
...

USAGE:
- Get via useContext hook

import ..., {usecontext} from 'react';
import DemoStore from '../stores/demoStore';

const Demo = () => {
	const demoStore = useContext(DemoStore);
	const {firstName, lastName} = demoStore;
	...
}

+++++++++++++Observer+++++++++++++
- If you dont make component an Observer of an Observable, React Compoentn will not be notified with changes

import {observer} from 'mobx-react-lite'

const Demo = () => {
...

export default observer(Demo);


+++++++++++++Computed Properties+++++++++++++
https://mobx.js.org/refguide/computed-decorator.html
Computed values are values that can be derived from the existing state or other computed values. 
help you to make your actual modifiable state as small as possible. Besides that they are highly optimized, so use them wherever possible.

ex. we'll get actvities sorted by date:
  @computed get activitiesByDate() {
    return this.activities.sort(
      (a, b) => Date.parse(a.date) - Date.parse(b.date)
    );
  }

usage:
const ActivityList: React.FC<IProps> = ({
  deleteActivity,
  submitting,
  target
}) => {
  const activityStore = useContext(ActivityStore);
  const { activitiesByDate, selectActivity } = activityStore;

  return (
    <Segment clearing>
      <Item.Group divided>
        {activitiesByDate.map(activity => (
		...

+++++++++++++Observable Maps+++++++++++++
https://mobx.js.org/refguide/map.html
- creates a dynamic keyed observable map. very useful if you don't want to react just to the change of a specific entry, 
but also to the addition or removal of entries.

example:
@observable activityRegistry = new Map();
...
inside: @action loadActivities = async () => {
instead of:
this.activities.push(activity);
replace with:
this.activityRegistry.set(activity.id, activity);

inside: 
@action createActivity = async (activity: IActivity) => {
instead of:
this.activities.push(activity);
replace with:
this.activityRegistry.set(activity.id, activity);

inside:
@action selectActivity = (id: string) => {
instead of:
this.selectedActivity = this.activities.find(a => a.id === id);
replace with:
this.selectedActivity = this.activityRegistry.get(id);

inside:
@computed get activitiesByDate() {
replace with:
return Array.from(this.activityRegistry.values()).sort(
      (a, b) => Date.parse(a.date) - Date.parse(b.date)
    );

+++++++++++++Strict Mode+++++++++++++

  @action loadActivities = async () => {
    this.loadingInitial = true;
    try {
      const activities = await agent.Activities.list();
      activities.forEach(activity => {
        activity.date = activity.date.split(".")[0];
        this.activityRegistry.set(activity.id, activity);
      });
      this.loadingInitial = false;
    } catch (error) {
      console.log(error);
      this.loadingInitial = false;
    }
  };

async actions & flows | MobX
https://mobx.js.org/best/actions.html?source=post_page---------------------------
action
https://mobx.js.org/refguide/action.html
ex. this.activityRegistry.set(activity.id, activity);
- mutating state inside action, we have to run everything that mutate state inside the action
- however this doesnt run inside action, because we are inside async/await
- we are actually inside .then(...), which is a new action
- action wrapper/decorator only affects the running action

1. We have to set enforceActions
configure({ enforceActions: "always" });

!! Error in App, Unhandled Rejection (Error): [mobx] Since strict-mode is enabled, changing observed observable values outside actions 
is not allowed. Please wrap the code in an `action` if this change is intended. 
Tried to modify: ActivityStore@2.loadingInitial

2. Strict mode enabled, Refactor code to wrap code inside actions

@action loadActivities = async () => {
    this.loadingInitial = true;
    try {
      const activities = await agent.Activities.list();
      activities.forEach(activity => {
        activity.date = activity.date.split(".")[0];
        this.activityRegistry.set(activity.id, activity);
      });
      this.loadingInitial = false; //THIS IS CASUING THE ERROR
    } catch (error) {
      console.log(error);
      this.loadingInitial = false; //THIS IS CASUING THE ERROR
    }
  };

Resolution 1: we put state  changes inside runInAction(() => {});
@action loadActivities = async () => {
    this.loadingInitial = true;
    try {
      const activities = await agent.Activities.list();
      runInAction("loading activities", () => {
        activities.forEach(activity => {
          activity.date = activity.date.split(".")[0];
          this.activityRegistry.set(activity.id, activity);
        });
        this.loadingInitial = false;
      });
    } catch (error) {
      runInAction("load activities error", () => {
        this.loadingInitial = false;
      });
      console.log(error);
    }
  };

  !!! Set runInAction in all @action methods that uses async and place state change code inside
