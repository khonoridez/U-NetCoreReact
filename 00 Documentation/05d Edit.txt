
+++++++++++++++++++++Route Edit Button to Form+++++++++++++++++++++++

1. Create useState hook for editMode
- We do not need to set about type useState<boolean> since it will automatically infer the type
const [editMode, setEditMode] = useState(false);

2. Pass and destructure (via <IProps>) both properties to ActivityDashboard
interface IProps {
  ...
  editMode: boolean;
  setEditMode: (editMode: boolean) => void;
}
const ActivityDashboard: React.FC<IProps> = ({
  ...
  editMode,
  setEditMode
}) => {

3. Set editMode conditional for ActivityForm
{selectedActivity && !editMode && (
    <ActivityDetails activity={selectedActivity} />
)}
{editMode && <ActivityForm />}

4. Handle Edit Button in ActivityDetails
4.1 Pass setEditMode to ActivityDetails
interface IProps {
  activity: IActivity;
  setEditMode: (editMode: boolean) => void;
}

4.2 Destructure in <IProps>
const ActivityDetails: React.FC<IProps> = ({ activity, setEditMode }) => {

4.3 Handle onClick event of Edit Button

+++++++++++++++++++++Route Create Button to Form+++++++++++++++++++++++

1. Create handler to set null to edit flags

const handleOpenCreateForm = () => {
    setSelectedActivity(null);
    setEditMode(true);
  };

2. Pass handler to NavBar
<NavBar openCreateForm={handleOpenCreateForm} />

3. Catch in NavBar.tsx
3.1 Create interface set Function Signature
interface IProps {
  openCreateForm: () => void;
}
3.2 Deconstruct
const NavBar: React.FC<IProps> = ({ openCreateForm }) => {
3.3 Handle in Create Button
<Button onClick={openCreateForm} positive content="Create Activity" />


+++++++++++++++++++++Handle Forms Cancel Button+++++++++++++++++++++++
!!Turn off Edit mode when Cancel Button is clicked

++++++ActivityForm.tsx++++++
1. From ActivityDashboard pass setEditMode prop to ActivityForm
{... <ActivityForm setEditMode={setEditMode} />}
2. Create interface in ActivityForm and deconstruct in parameter
interface IProps {
  setEditMode: (editMode: boolean) => void;
}

const ActivityForm: React.FC<IProps> = ({ setEditMode }) => { ...
3. Handle onClick of Cancel Button
 <Button
    onClick={() => setEditMode(false)}
    floated="right"
    type="button"
    content="Cancel"
 />


++++++ActivityDetails.tsx++++++
!Set selectedActivity to null for Cancel Button
1. Pass setSelectedActivity from App to ActivityDashboard 

<ActivityDashboard
    ...
    setSelectedActivity={setSelectedActivity}
    ...
/>

2. Catch (IProps, Destructure) in ActivityDashboard
interface IProps {
  ...
  setSelectedActivity: (activity: IActivity | null) => void;
  ...
}

const ActivityDashboard: React.FC<IProps> = ({
  ...
  setSelectedActivity,
  ...
}) => {

3. Pass setSelectedActivity from ActivityDashboard to ActivityDetails
<ActivityDetails
    ...
    setSelectedActivity={setSelectedActivity}
    />

4. Catch (IProps, Destructure) in ActivityDetails
interface IProps {
  ...
  setSelectedActivity: (activity: IActivity | null) => void;
}

const ActivityDetails: React.FC<IProps> = ({
  ...
  setSelectedActivity
}) => {

5. Handle onChange of Cancel Button and pass null
<Button
    onClick={() => setSelectedActivity(null)}
    ...
    ></Button>

+++++++++++++++++++++Controlled Components+++++++++++++++++++++++

Handle Input Change
- fields are read-only
- this is due to value property
- removing the value property will enable editing of the field
- we have to tell React the changes of the compoenent states for React to update the Virtual DOM

1. Create Handler for setActivity
  const handleInputChange = (event: any) => {
    console.log(event.target.value);
    setActivity({ ...activity, title: event.target.value });
  };

- spread the properties of the activity object
...activity

2. Implement on the onChange of the Form Input
<Form.Input
    onChange={handleInputChange}
    placeholder="Title"
    value={activity.title}
/>

3. verify under Components Tab on f12
under hooks > state: object
- verify property being changed

4. Add name property on Input, and change parameter on setActivity
<Form.Input
    name="title"
    ...
/>
...
const handleInputChange = (event: any) => {
	console.log(event.target.value);
	setActivity({ ...activity, [event.target.name]: event.target.value });
};

- [] bracket notation sytnax for objects

5. Destructure name and value form event.target
const handleInputChange = (event: any) => {
    const { name, value } = event.target;
    setActivity({ ...activity, [name]: value });
  };

6. Apply to other input fields
<Form.TextArea
    onChange={handleInputChange}
    name="description"
	...
/>

7. Change type for (event:any) for the type that the input passes
const handleInputChange = (event: ChangeEvent<HTMLInputElement>) => {

!Error- However Textarea's onChange returns React.FormEvent<HTMLTextAreaElement>
- Change ChangeEvent to FormEvent
- Add HtmlTextAreaElement as generic parameter
event: FormEvent<HTMLInputElement | HTMLTextAreaElement>

  const handleInputChange = (
    event: FormEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    const { name, value } = event.currentTarget;
    setActivity({ ...activity, [name]: value });
  };

+++++++++++++++++++++Handle Submit+++++++++++++++++++++++

1. Create handler for submit
const handleSubmit = () => {
    console.log(activity);
  };

2. Handle to Form's onSubmit
<Form onSubmit={handleSubmit}>

3. In App.tsx create 2 handlers for Create and Edit
const handleCreateActivity = (activity: IActivity) => {
	setActivities([...activities, activity]);
};

const handleEditActivity = (activity: IActivity) => {
	setActivities([...activities.filter(a => a.id !== activity.id), activity]);
};

4. Pass to ActivityDashboard.tsx then from ActivityDashboard to ActivityForm
interface IProps {
  ...
  createActivity: (activity: IActivity) => void;
  editActivity: (activity: IActivity) => void;
}

const ActivityForm: React.FC<IProps> = ({
  ...
  createActivity,
  editActivity
}) => {

5. Modify handleSubmit to use the 2 handlers
const handleSubmit = () => {
    if (activity.id.length === 0) {
      let newActivity = { ...activity, id: "guid" };
      createActivity(newActivity);
    } else {
      editActivity(activity);
    }
  };

+++++++++++++++++++++Guid generation+++++++++++++++++++++++

1. Install uuid
> npm install uuid

2. ! Error Could not find a declaration file for module 'uuid'.
 Try `npm install @types/uuid` if it exists or add a new declaration
- follow instruction
> npm install @types/uuid

3. import uuid
import { v4 as uuid } from "uuid";

4. use in handleSubmit
const handleSubmit = () => {
    if (activity.id.length === 0) {
      let newActivity = { ...activity, id: uuid() };
      ...
	};

5. Fix selected Activity upon Save
const handleCreateActivity = (activity: IActivity) => {
    ...
    setSelectedActivity(activity);
    setEditMode(false);
  };

const handleEditActivity = (activity: IActivity) => {
	...
	setSelectedActivity(activity);
	setEditMode(false);
};

+++++++++++++++++++++Fix issues+++++++++++++++++++++++

1. When clicking on View while Form is open nothing happens
- Add setEditMode(false);
const handleSelectedAcitvity = (id: string) => {
    ...
    setEditMode(false);
  };

2. When clicking on Create Activity while Form is open update the Form to blank state
- ActivityForm hook states are filled up nothing changes
- Create activity resets props for 'activity'
- Give ActivityForm a key
- ActivityForm reinitialize everytime key changes

<ActivityForm key={(selectedActivity && selectedActivity.id) || 0}

3. Date input
- Change date input to allow for time
<Form.Input
	...
	type="datetime-local"
/>

- Reformat the date to take out milliseconds
- Format date upon getting the data from Api
- loop through the results (response.data.forEach)
- split activity.date to get just first part	
useEffect(() => {
    axios
      .get<IActivity[]>("http://localhost:5000/api/activities")
      .then(response => {
        let activites: IActivity[] = [];
        response.data.forEach(activity => {
          activity.date = activity.date.split(".")[0];
          activities.push(activity);
        });
        setActivities(activites);
      });
  }, []);