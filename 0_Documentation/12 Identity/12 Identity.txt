
+++++++++++++Outline+++++++++++++
1. AspNet Core Identity
- Login, generate a token

2. JWT Token authentication
- return to the user from Identity

3. Adding an Infrastructure Project
- JWT Token Generator

+++++++++++++AspNet Core Identity+++++++++++++
1. Membership System
2. Supports login stored in Identity
3. Supports external providers
- ex. Facebook, Google Login
4. Comes with default user stores
- AspNetUsers, AspNetRoles etc.
5. UserManager
- Create, Search
6. SignInManager


PasswordHasher.cs
- Applies Hash and Salt to Paswords

+++++++++++++Install and Setup AspNet Core Identity+++++++++++++

1. Under Domain Project, Create AppUser.cs
- We do not have a workaround but to add IdentityUser to the Domain Project
public class AppUser : IdentityUser
{
    public string DisplayName { get; set; }
}

2. Install AspNet Core identity
- NuGet Package Manager: Add Package
- Micorosft.AspNetCore.Identity.EntityFrameworkCore
- Same verion with AspNet Core installed 3.0.0

3. Modify DataContext to inherit from IdentityDbContext<AppUser>
public class DataContext : IdentityDbContext<AppUser>

- Pass base OnModelCreating
protected override void OnModelCreating(ModelBuilder builder)
{
	base.OnModelCreating(builder);
	...

4. Add new migration
dotnet ef migrations add "AddedIdentity" -p Persistence/ -s API/

+++++++++++++Setup Identity in Api Project+++++++++++++

1. Setup identityBuilder
- under Startup.cs
public void ConfigureServices(IServiceCollection services)
{
    ...
    var builder = services.AddIdentityCore<AppUser>();
    var identityBuilder = new IdentityBuilder(builder.UserType, builder.Services);
    identityBuilder.AddEntityFrameworkStores<DataContext>();
    identityBuilder.AddSignInManager<SignInManager<AppUser>>();
}

+++++++++++++Seed Users+++++++++++++
1. Persistence/Seed.cs
2. Seed AppUsers
- we have to change the signature to async

public static async Task SeedData(DataContext context, UserManager<AppUser> userManager)
{
    if (!userManager.Users.Any())
    {
        var users = new List<AppUser>
        {
            new AppUser { DisplayName = "Bob", UserName = "bob", Email = "bob@test.com" },
            new AppUser { DisplayName = "Tom", UserName = "tom", Email = "tom@test.com" },
            new AppUser { DisplayName = "Jane", UserName = "jane", Email = "jane@test.com" }
        };

        foreach (var user in users)
        {
            await userManager.CreateAsync(user, "password@1");
        }
    }
	....

3. Modify Seed call in Program.cs in Api Project
- Pass in the new parameter UserManager instance

public static void Main(string[] args)
{
    var host = CreateHostBuilder(args).Build();

    using (var scope = host.Services.CreateScope())
    {
        var services = scope.ServiceProvider;

        try
        {
            var context = services.GetRequiredService<DataContext>();
            var userManager = services.GetRequiredService<UserManager<AppUser>>();

            context.Database.Migrate();
            Seed.SeedData(context, userManager).Wait();

4. Rerun Api to Seed AppUsers


