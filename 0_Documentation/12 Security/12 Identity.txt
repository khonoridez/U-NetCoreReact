
+++++++++++++Outline+++++++++++++
1. AspNet Core Identity
- Login, generate a token
- Setup, Configiration
- Authentication

2. JWT Token authentication
- send to the user from Identity

3. Adding an Infrastructure Project
- JWT Token Generator

4. Getting username from the token when request comes in to the Api
- used a lot to get current user as user navigates in the application


+++++++++++++AspNet Core Identity+++++++++++++
1. Membership System
2. Supports login stored in Identity
3. Supports external providers
- ex. Facebook, Google Login
4. Comes with default user stores
- AspNetUsers, AspNetRoles etc.
5. UserManager
- Create, Search
6. SignInManager


PasswordHasher.cs
- Applies Hash and Salt to Paswords

+++++++++++++Install and Setup AspNet Core Identity+++++++++++++

1. Under Domain Project, Create AppUser.cs
- We do not have a workaround but to add IdentityUser to the Domain Project
public class AppUser : IdentityUser
{
    public string DisplayName { get; set; }
}

2. Install AspNet Core identity
- NuGet Package Manager: Add Package
- Micorosft.AspNetCore.Identity.EntityFrameworkCore
- Same verion with AspNet Core installed 3.0.0

3. Modify DataContext to inherit from IdentityDbContext<AppUser>
public class DataContext : IdentityDbContext<AppUser>

- Pass base OnModelCreating
protected override void OnModelCreating(ModelBuilder builder)
{
	base.OnModelCreating(builder);
	...

4. Add new migration
dotnet ef migrations add "AddedIdentity" -p Persistence/ -s API/

+++++++++++++Setup Identity in Api Project+++++++++++++

1. Setup identityBuilder
- under Startup.cs
public void ConfigureServices(IServiceCollection services)
{
    ...
    var builder = services.AddIdentityCore<AppUser>();
    var identityBuilder = new IdentityBuilder(builder.UserType, builder.Services);
    identityBuilder.AddEntityFrameworkStores<DataContext>();
    identityBuilder.AddSignInManager<SignInManager<AppUser>>();
}

+++++++++++++Seed Users+++++++++++++
1. Persistence/Seed.cs
2. Seed AppUsers
- we have to change the signature to async

public static async Task SeedData(DataContext context, UserManager<AppUser> userManager)
{
    if (!userManager.Users.Any())
    {
        var users = new List<AppUser>
        {
            new AppUser { DisplayName = "Bob", UserName = "bob", Email = "bob@test.com" },
            new AppUser { DisplayName = "Tom", UserName = "tom", Email = "tom@test.com" },
            new AppUser { DisplayName = "Jane", UserName = "jane", Email = "jane@test.com" }
        };

        foreach (var user in users)
        {
            await userManager.CreateAsync(user, "password@1");
        }
    }
	....

3. Modify Seed call in Program.cs in Api Project
- Pass in the new parameter UserManager instance

public static void Main(string[] args)
{
    var host = CreateHostBuilder(args).Build();

    using (var scope = host.Services.CreateScope())
    {
        var services = scope.ServiceProvider;

        try
        {
            var context = services.GetRequiredService<DataContext>();
            var userManager = services.GetRequiredService<UserManager<AppUser>>();

            context.Database.Migrate();
            Seed.SeedData(context, userManager).Wait();

4. Rerun Api to Seed AppUsers

+++++++++++++Login Handler+++++++++++++
1. Application Project, create new folder User
- Create new file Login.cs

2. Type snippet (Vs Code) qhandler to generate Query snippept

3. Add Query propeprties
public string Email { get; set; }
public string Password { get; set; }

4. Add Query Validator
public class QueryValidator : AbstractValidator<Query>
{
    public QueryValidator()
    {
        RuleFor(x => x.Email).NotEmpty();
        RuleFor(x => x.Password).NotEmpty();
    }
}

5. Implement in Handler
- we are getting these values from UserManager instead of dbContext

public class Handler : IRequestHandler<Query, AppUser>
{
    private readonly UserManager<AppUser> _userManager;
    private readonly SignInManager<AppUser> _signInManager;

    public Handler(UserManager<AppUser> userManager, SignInManager<AppUser> signInManager)
    {
        _userManager = userManager;
        _signInManager = signInManager;
    }
	...

6. Implement Handle
public async Task<AppUser> Handle(Query request, CancellationToken cancellationToken)
{
    var user = await _userManager.FindByEmailAsync(request.Email);

    if (user == null)
    {
        throw new RestException(HttpStatusCode.Unauthorized);
    }

    var result = await _signInManager.CheckPasswordSignInAsync(user, request.Password, false);

    if (result.Succeeded)
    {
        //TODO: Generate Token

        return user;
    }

    throw new RestException(HttpStatusCode.Unauthorized);
}

+++++++++++++Create Base Controller+++++++++++++
- Api Project, create Base Controller to get all methods/properties common to all Controllers

1. Create file Controllers/BaseController.cs
- manually add using Microsoft.Extensions.DependencyInjection;
...
using Microsoft.Extensions.DependencyInjection;
...
[Route("api/[controller]")]
[ApiController]
public class BaseController : ControllerBase
{
    private IMediator _mediator;
    protected IMediator Mediator => _mediator ?? (_mediator = HttpContext.RequestServices.GetService<IMediator>());
}

2. Derive suceeding Controllers to this BaseController
- Remove controller [atrributes]
- replace calls from _mediator to the protected property Mediator from the base controller

public class ActivitiesController : BaseController
{
    [HttpGet]
    public async Task<ActionResult<List<Activity>>> List()
    {
        return await Mediator.Send(new List.Query());
    }


+++++++++++++Create User Controller+++++++++++++

1. Create UserController.cs
 public class UserController : BaseController
{
    [HttpPost("login")]
    public async Task<ActionResult<AppUser>> Login(Login.Query query)
    {
        return await Mediator.Send(query);
    }
}

2. Test in Postman
- Module 12 scenarios

3. Create User class under Application Project
- choose properties that we will be returning to Api so we do not send sensitive information
- (email, password hash etc.)
public class User
{
    public string DisplayName { get; set; }
	...

4. Use User object instead of AppUser in Login handler
public class Query : IRequest<User>
...
public class Handler : IRequestHandler<Query, User>
...
return new User
{
    DisplayName = user.DisplayName,
    Token = "This will be the token",
    Username = user.UserName,
    Image = null
};

- Modify in Controller
public async Task<ActionResult<User>> Login(Login.Query query)

5. Test in Postman,  Login user successful
{
    "displayName": "Bob",
    "token": "This will be the token",
    "username": "bob",
    "image": null
}

+++++++++++++Get Current UserName from Token+++++++++++++

1. In Application Project create new interface IUserAccessor.cs
public interface IUserAccessor
{
    string GetCurrentUserName();
}

2. In Infrastructure Project create concrete class UserAccessor.cs

public class UserAccessor : IUserAccessor
{
    public string GetCurrentUserName()
	...

- Get Username from token

3. Inject IHttpContextAccessor
private readonly IHttpContextAccessor _httpContextAccessor;

public UserAccessor(IHttpContextAccessor httpContextAccessor)
{
    _httpContextAccessor = httpContextAccessor;
}

4. Get the username from claims inside httpcontext
public string GetCurrentUserName()
{
    var username = _httpContextAccessor.HttpContext.User?.Claims?
        .FirstOrDefault(x => x.Type == ClaimTypes.NameIdentifier)?.Value;

    return username;
}

5. Inject userAccessor as a service in Startup.cs
...
services.AddScoped<IUserAccessor, UserAccessor>();

6. In Application Project, create file User/CurrentUser.cs
- type qhandler in VS Code for query snippet

7. Change return type to User
public class Query : IRequest<User>
...

8. Inject UserManager, IJwtGenerator and IUserAccessor to populate User
private readonly UserManager<AppUser> _userManager;
private readonly IJwtGenerator _jwtGenerator;
private readonly IUserAccessor _userAccessor;

public Handler(UserManager<AppUser> userManager, IJwtGenerator jwtGenerator,
    IUserAccessor userAccessor)
{
    _userManager = userManager;
    _jwtGenerator = jwtGenerator;
    _userAccessor = userAccessor;
}

9. Implement Handle method by getting user by user name and return
public async Task<User> Handle(Query request, CancellationToken cancellationToken)
{
    var user = await _userManager.FindByNameAsync(_userAccessor.GetCurrentUserName());

    return new User
    {
        DisplayName = user.DisplayName,
        Token = _jwtGenerator.CreateToken(user),
        Username = user.UserName,
        Image = null
    };
}

10. Implement in user controller
[HttpGet]
public async Task<ActionResult<User>> CurrentUser()
{
    return await Mediator.Send(new CurrentUser.Query());
}

11. Test in Postman
- Module 12/Get Current User
- In Headers tab: Paste token in Bearer
!! Error 500 if no/incorrect token specified
- Adjusted [AllowAnonymous] attribute from Controller level to method level
[AllowAnonymous]
[HttpPost("login")]
public async Task<ActionResult<User>> Login(Login.Query query) ...

[AllowAnonymous]
[HttpPost("register")]
public async Task<ActionResult<User>> Register(Register.Command command) ...

