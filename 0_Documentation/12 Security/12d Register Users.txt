
++++++++++Register Command++++++++++

1. Under Application Project, Create Command Register
/User/Register.cs

2. type chandler for Command Handler sninppet

!!!We will not be separating Registering and Logging in user for this practice

3. Add Command Properties, Specify type of IRequest 
public class Command : IRequest<User>
{
    public string DisplayName { get; set; }
	...

4. Add Validators
public class CommandValidator : AbstractValidator<Command>
{
    public CommandValidator()
    {
        RuleFor(x => x.DisplayName).NotEmpty();
		...

5. Inject UserManager and IJwtGenerator to Handler
public Handler(DataContext context, UserManager<AppUser> userManager, IJwtGenerator jwtGenerator)
{
    _context = context;
    _userManager = userManager;
    _jwtGenerator = jwtGenerator;
}

6. Check for duplicate username and email
public async Task<Unit> Handle(Command request, CancellationToken cancellationToken)
{
    if (await _context.Users.Where(x => x.Email == request.Email).AnyAsync())
        throw new RestException(HttpStatusCode.BadRequest, new { Email = "Email already exist" });

    if (await _context.Users.Where(x => x.UserName == request.UserName).AnyAsync())
        throw new RestException(HttpStatusCode.BadRequest, new { UserName = "Username already exist" });
		...

7. Create user, save using _userManager
var user = new AppUser
{
    DisplayName = request.DisplayName,
    Email = request.Email,
    UserName = request.UserName
};

var result = await _userManager.CreateAsync(user, request.Password);

8. Return new User with token, change return type to Task of User

public async Task<User> Handle(Command request, CancellationToken cancellationToken)
{
    ...
    if (result.Succeeded)
    {
        return new User
        {
            DisplayName = user.DisplayName,
            Token = _jwtGenerator.CreateToken(user),
            Username = user.UserName,
            Image = null
        };
    }
	...

9. Specify second type parameter of Handler
public class Handler : IRequestHandler<Command, User> ....


++++++++++Register Controller++++++++++

1. Create Register Controller
[HttpPost("register")]
public async Task<ActionResult<User>> Register(Register.Command command)
{
    return await Mediator.Send(command);
}

2. Test in Postman
- Test various scenarios
- For weak password: net identity requries strong password
https://docs.microsoft.com/en-us/aspnet/core/security/authentication/identity-configuration?view=aspnetcore-3.0

