
++++++++++++++Authentication holes for Routes++++++++++++++
- log out, then go to /activities
- user will still be redirected to correct page
- implement everywhere aside from homepage
- Implement private routes in client-app\src\app\layout\App.tsx, apply if not logged in

1. Create file client-app\src\app\layout\PrivateRoutes.tsx
1.1 Create interface IProps that extends RouteProps along with other properties
- Desctructure props in component
interface IProps extends RouteProps {
  component: React.ComponentType<RouteComponentProps<any>>;
}

const PrivateRoute: React.FC<IProps> = ({ component, ...rest }) => {
...

2. Get rootStore.userStore to check user if logged in
- destructure isLoggedIn
const rootStore = useContext(RootStoreContext);
const { isLoggedIn } = rootStore.userStore;

3. Return Route
- pass rest of the properties
- handle render depending on user is loggedin or not
return (
    <Route
      {...rest}
      render={props =>
        isLoggedIn ? <Component {...props} /> : <Redirect to={"/"} />
      }
    />
  );

4. Set observer for PrivateRoute
- Since we are checking an obserable (isLoggedIn)
export default observer(PrivateRoute);

5. Set PrivateRoute for the routes in App.tsx
...
<Switch>
    <PrivateRoute
        exact
        path="/activities"
        component={ActivityDashboard}
    />
    <PrivateRoute
        path="/activities/:id"
        component={ActivityDetails}
    />
    <PrivateRoute
        key={location.key}
        path={["/createActivity", "/manage/:id"]}
        component={ActivityForm}
    />
    <PrivateRoute
        path="/profile/:username"
        component={ProfilePage}
    />
    <Route component={NotFound} />
</Switch>
...

!! Note: There is no such thing as client-side secruity
- Hiding behind the curtains rather than a locked door
- Server data protection is a requriement
