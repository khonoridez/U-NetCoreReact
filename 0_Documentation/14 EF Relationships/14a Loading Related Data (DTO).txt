
++++++++++++Loading Related Data+++++++++++++
https://docs.microsoft.com/en-us/ef/core/querying/related-data
There are three common O/RM patterns used to load related data.
1. Eager loading means that the related data is loaded from the database as part of the initial query.
2. Explicit loading means that the related data is explicitly loaded from the database at a later time.
3. Lazy loading means that the related data is transparently loaded from the database when the navigation property is accessed.

- We will implement Eager loading
....

1. Set Eager loading 
- in Activity List method
public async Task<List<Activity>> Handle(Query request, CancellationToken cancellationToken)
{
    return await _context.Activities
        .Include(a => a.UserActivities)
        .ThenInclude(a => a.AppUser)
        .ToListAsync();
}
- in Activity Details method
 public async Task<Activity> Handle(Query request, CancellationToken cancellationToken)
{
    var activity = await _context.Activities
        .Include(a => a.UserActivities)
        .ThenInclude(a => a.AppUser)
        .SingleOrDefaultAsync(a => a.Id == request.Id);

    if (activity == null)
        throw new RestException(HttpStatusCode.NotFound, new { activity = "Not Found" });

    return activity;
}

!! This wont work due to self-reference errors
{
    "errors": "A possible object cycle was detected which is not supported. This can either be due to a cycle or if the 
	object depth is larger than the maximum allowed depth of 32."
}

++++++++++++Implement DTO+++++++++++++

1. Create file ActivityDto.cs
- Application Project/Activities/ActivityDto.cs

2. Create file AttendeeDto.cs
- Application Project/Activities/AttendeeDto.cs

3. Add property in ActivityDto.cs
public ICollection<AttendeeDto> Attendees { get; set; }

4. Use ActivityDto in both Activity List and Details requests
return new ActivityDto { .... };

!!!Tedious to map to DTO

++++++++++++Implement Automapper+++++++++++++

1. Install AutoMapper to Application Project
AutoMapper.Extensions.Microsoft.DependencyInjection 7.0.0

2. Inject in Api Startup.cs
- Look for Assembly that contains the Automapping Profiles
services.AddAutoMapper(typeof(List.Handler).Assembly);

3. Create Mapping Profile, MappingProfile.cs
- Application/Activities/MappingProfile.cs
public class MappingProfile : Profile
{
    public MappingProfile()
    {
        CreateMap<Activity, ActivityDto>();
        CreateMap<UserActivity, AttendeeDto>();
    }
	...

4. Use automapper to return DTOs
- Inject Automapper to Details
- Use as the return type in Handle method
public async Task<ActivityDto> Handle(Query request, CancellationToken cancellationToken)
{
    ...
    var activityToReturn = _mapper.Map<Activity, ActivityDto>(activity);
    return activityToReturn;
}
- Use in Api, change Apis return type

5. Test in Postman
- Should have nulls in Attendees
- If we change ICollection<UserActivity> Attendees to public ICollection<UserActivity> UserActivities { get; set; }
like what we have in Domain/Activity, this should automatically map to the DTO

6. Implement JsonProperty to reflect attendees in Api
[JsonProperty("attendees")]
public ICollection<AttendeeDto> UserActivities { get; set; }

6. Configure Mappings for inner properties of UserActivity
- in Application project/MappingProfile.cs
CreateMap<UserActivity, AttendeeDto>()
	.ForMember(d => d.Username, o => o.MapFrom(s => s.AppUser.UserName))
	.ForMember(d => d.DisplayName, o => o.MapFrom(s => s.AppUser.DisplayName));

++++++++++++Implement Lazy Loading+++++++++++++

1. Add package EF Proxies
- Microsoft.EntityFrameworkCore.Proxies 3.0
- Install same as EF Core (3.0) packages installed
- Add to Persistence Project

2. Configure in Startup.cs
public void ConfigureServices(IServiceCollection services)
{
    services.AddDbContext<DataContext>(opt =>
    {
        opt.UseLazyLoadingProxies();
        ...
    });
	...

3. Add virtual keyword wherever we're using related data
- /Domain/Activity.cs
public virtual ICollection<UserActivity> UserActivities { get; set; }

- /Domain/AppUser.cs
public virtual ICollection<UserActivity> UserActivities { get; set; }

- /Domain/UserActivity.cs
public virtual AppUser AppUser { get; set; }
public virtual Activity Activity { get; set; }

4. Remove include statements where this was called
- /Application/Activities/Details.cs
var activity = await _context.Activities.FindAsync(request.Id);

- /Application/Activities/List.cs
var activities = await _context.Activities.ToListAsync();
