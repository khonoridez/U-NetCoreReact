
+++++++++++++Outline+++++++++++++

1. EF Relationships
2. DTO
3. Automapper
4. Eager / Lazy Loading related data
5. Types
- One to one (User - Address)
- One to many (User - Photos)
- Many to many (User-UserActivities-Activities)
6. Many to many
- using join table (UserActivities)
- UserActivities
	AppUserId
	ActivityId
	DateJoined
	IsHost

+++++++++++++UserActivity Entity+++++++++++++

1. Under Domain Prject, create join table class UserActivity.cs
public class UserActivity
{
    public string AppUserId { get; set; }
    public AppUser AppUser { get; set; }
    public Guid ActivityId { get; set; }
    public Activity Activity { get; set; }
    public DateTime DateJoined { get; set; }
    public bool IsHost { get; set; }
}

- EF is convention based, recognize the Id and the corresponding object (AppUser, Activity)

2. Attach UserActivity to both AppUser and Activity
public class Activity
{
    ...
    public ICollection<UserActivity> UserActivities { get; set; }
}

3. Configure in DataContext File in Persistence Project
public DbSet<UserActivity> UserActivities { get; set; }
...

- define relationship OnModelCreating
builder.Entity<UserActivity>(x => x.HasKey(ua => new { ua.AppUserId, ua.ActivityId }));

builder.Entity<UserActivity>()
    .HasOne(u => u.AppUser)
    .WithMany(a => a.UserActivities)
    .HasForeignKey(u => u.AppUserId);

builder.Entity<UserActivity>()
    .HasOne(a => a.Activity)
    .WithMany(u => u.UserActivities)
    .HasForeignKey(a => a.ActivityId);

4. Create new migration
dotnet ef migrations add "UserActivityAdded" -p Persistence/ -s API/

+++++++++++++Attach UserActivity (Attendee) to User and Activity methods+++++++++++++

1. In Application project, in the Create method
- get reference from the current logged in user
- to access the method user has to be authenticated
- get token, get user from db
- use this user to add for attendee

- Inject IUserAccessor from Application/Intefaces to access User methods
public class Handler : IRequestHandler<Command>
{
    ...
    private readonly IUserAccessor _userAccessor;

    public Handler(DataContext context, IUserAccessor userAccessor)
    {
        ...
        _userAccessor = userAccessor;
    }
	...

2. Save new Attendee as well as new Activity on the ACtivity Create method
...
_context.Activities.Add(activity);

var user = await _context.Users.SingleOrDefaultAsync(u => u.UserName == _userAccessor.GetCurrentUserName());

var attendee = new UserActivity
{
    AppUser = user,
    Activity = activity,
    IsHost = true,
    DateJoined = DateTime.Now
};

_context.UserActivities.Add(attendee);

3. Test in Postman (Module 14)

- Login as bob and save token to env
- under body tab
{
	"email": "bob@test.com",
	"password": "Password@1"
}
- this Postman Request contains a "Test" that will save the token in Postman global

- Test by using Create Activity current user host
- under body tab
{
	"id": "{{$guid}}",
	"title": "Test event with bob as host",
	"description": "Description of the test event",
	"category":"drinks",
	"date": "{{activityDate}}",
	"city": "London",
	"venue": "London venue"
}

- This will now create the UserActivity, verify if entry was saved in database
