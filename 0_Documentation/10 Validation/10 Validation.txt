

Api Side
1. Api Validation using Data Attributes
2. Api Validation using Fluent Validation
3. Exception and Error Handling
4. Adding custom middleware
- Api controllers are not going to be responsible for handling error handlers

Client Side
1. Axios interceptors
2. Throwing errors

++++++++++Validation Cases++++++++++
Cases
1. Creating with empty object
2. 

++++++++++Data Annotations++++++++++
In Application/Activities/Create.cs
- Creating Empty Activity

1. Set Required Attribute
[Required]
public Guid Id { get; set; }
[Required]
public string Title { get; set; }
- This should not give a 400 bad request

- This is due however to [ApiController] handling the error
- Comment out [ApiController] for verification

2. Debug and verify null values in VS Code
- Verify values under Variables/locals/command upon debugging that we have null values upon testing "api/create" with empty object
- Verify ModelState
 IsValid: Variables/locals/this/ModelState/IsValid
 ErrorMessage: Variables/locals/this/ModelState/Results View/[0]/Value/Errors/[0]/ErrorMessage

 3. Add validation for ModelState.IsValid
 [HttpPost]
public async Task<ActionResult<Unit>> Create(Create.Command command)
{
    if (!ModelState.IsValid)
        return BadRequest(ModelState);
    return await _mediator.Send(command);
}

4. Verify in Postman (Module10 Create Empty Activty) that it will return 400 Bad Request and the Annotation error message
{
    "Title": [
        "The Title field is required."
    ]
}

5. Binding Source Parameter Inference
- No need for ([FromBody]..., to check where data is coming from. This is already inferred

++++++++++Fluent Validations++++++++++
- Common Technique in Mediator Pattern, add data validation between Command and Handler

1. Install Fluent Validation
https://fluentvalidation.net/start
- Nuget Package Manager: Add Package
- FluentValidation.AspNetCore 8.5.0
- Add to Application Project
- Restore button

2. implement FluentValidation in Create Command under Application/Activities/Create.cs
- create class
public class CommandValidator : AbstractValidator<Command>
- create Constructor and specify rules
public CommandValidator()
{
    RuleFor(x => x.Title).NotEmpty();
	...

3. Add FluentValidation on Startup (Api project)
services.AddControllers()
	.AddFluentValidation(cfg => cfg.RegisterValidatorsFromAssemblyContaining<Create>());

4. implement on Edit Command
- Copy paste CommandValidator
public class CommandValidator : AbstractValidator<Command> ...

- Test in Postman
- Edit an Activity missing fields (Check input in Body) should return 400
- Edit an Activity correct (Check input in Body, should have all fields) should return 200
