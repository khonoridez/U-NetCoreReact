
++++++++++Axios Response Interceptors++++++++++
https://github.com/axios/axios

1. Add Interceptor in /src/app/api/agent.ts
- 1st parameter what to do to the response

axios.interceptors.response.use(undefined, error =>
  console.log(error.response)
);

2. Verify results by going to url with a non-existent id
- Verify error object
- under data/errors/activity: "Not Found"

3. Create new component NotFound.tsx
- under /src/app/layout/NotFound.tsx
- type snippet s_10.9.1 for the styled content
- Add Route with no path at the end of Route list in App.tsx
		...
		<Route component={NotFound} />
	</Container>
</Fragment>

- Will be working for url that has no specified path (ex. http://localhost:3000/asdasda)

4. Add <Switch> from Router and put Routes inside to ensure that only one Route at a time will render
...
<Container style={{ marginTop: "7em" }}>
<Switch>
	<Route exact path="/activities" component={ActivityDashboard} />
	<Route path="/activities/:id" component={ActivityDetails} />
	...

!!!Redirect to the NotFound Component NotFound activities

5. Fix Loading Component in ActivityDetails
  ...
  if (loadingInitial) return <LoadingComponent content="Loading activity..." />;
  if (!activity) return <h2>Activity Not Found</h2>;
  ...

6. Throw error from axios interceptor
axios.interceptors.response.use(undefined, error => {
  if (error.response.status === 404) {
    throw error.response;
  }
});

7. Catch and throw again in ActivityStore in:
...
@action loadActivity = async (id: string) => {
...
} catch (error) {
	...
	throw error;
}
...

8. Catch in ActivityDetails page, in useEffect.. loadActivity
useEffect(() => {
 loadActivity(match.params.id).catch(() => {});
 ...

9. Get the history props inside ActivityDetails
const ActivityDetails: React.FC<RouteComponentProps<DetailParams>> = ({
  ...
  history
}) => {

10. Redirect to NotFound inside the catch callback
  useEffect(() => {
    loadActivity(match.params.id).catch(() => history.push("/notfound"));
  }, [loadActivity, match.params.id, history]);

!! Add history in the useEffect's dependency

!! We will utilize the routing inside Axios Interceptor instead of inside Component

++++++++++Redirect to NotFound++++++++++

1. Create custom history object, and pass history as props to Router
- in Index.html

...
export const history = createBrowserHistory();
...
ReactDOM.render(
  <Router history={history}>
  ...

2. Use history in axios interceptor
- import from index.tsx (../..) no need to specify file if coming from index
import { history } from "../..";

axios.interceptors.response.use(undefined, error => {
  if (error.response.status === 404) {
    history.push("/notfound");
  }
});

3. Change throw errors in ActivityStore (loadActivity) back to console.log(...)
4. Remove .catch() on ActivityDetails
5. Redirection to NotFound component now works for Details for id in Guid format
- However if id is not in Guid format we are redirected to a different error
- Verify in f12 > Network > Preview
- Validation error:  "The value 'b3afd51f-63c9-4227-a32d-732ca9d73e2' is not valid."

6. Verify the conditions for this route for the invalid kind of Guid error
- Use the conditions in the axios interceptor
6.1 It is a get
6.2 error has a key of id
6.3 status code is 400

axios.interceptors.response.use(undefined, error => {
  const { status, data, config } = error.response;
  ...
  if (
    status === 400 &&
    config.method === "get" &&
    data.errors.hasOwnProperty("id")
  ) {
    history.push("/notfound");
  }
});

++++++++++Redirect for Server Error 500++++++++++

1. Install Toastify
2. Add contional in axios interceptor
axios.interceptors.response.use(undefined, error => {
  ....
  if (status === 500) {
    toast.error("Server error - check the terminal for more info");
  }
});

3. Verify by refreshing inside Details
- developer tools > Network > Preview

4. Verify in dotnet terminal the stack trace for the error

++++++++++Error Connection Refusued++++++++++
1. Stop dotnet terminal
2. Verify in axios the error object we are getting
- error.message: Network Error
- error.response: undefined

3. Add contional in axios interceptor
axios.interceptors.response.use(undefined, error => {
  if (error.message === "Network Error" && !error.response) {
    toast.error("Network Error - make sure Api is running");
  }
  ...








