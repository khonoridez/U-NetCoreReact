
+++++++++++++++++Setup Follower Feature+++++++++++++++++
-  Since the new properties have MappingProfile already set via AutoMapper, this will just work with no configurations

1. Add following properties in IProfile and IAttendee model
export interface IProfile {
  ...
  following: boolean;
  followersCount: boolean;
  followingCount: boolean;
}
...
export interface IAttendee {
  ...
  following?: boolean;
}

2. Implement attendee.following boolean ActivityDetailedSidebar.tsx
\client-app\src\features\activities\details\ActivityDetailedSidebar.tsx

{attendee.following && (
    <Item.Extra style={{ color: "orange" }}>Following</Item.Extra>
)}

3. Implement attendee.following boolean on user avatars in ActivityListItemAttendees.tsx
3.1 Specify style (border in avatar that signifies user is following the user)
const styles = {
  borderColor: "orange",
  borderWidth: 2
};

3.2 Set style conditionally
<Image
    size="mini"
    circular
    src={attendee.image || "/assets/user.png"}
    bordered
    style={attendee.following ? styles : null}
    />

4. Implement attendee.following boolean in ProfileHeader.tsx
...
<Statistic label="Followers" value={profile.followersCount} />
<Statistic label="Following" value={profile.followingCount} />
...

+++++++++++++++++Follow Unfollow Functionality+++++++++++++++++
1. Add api methods to agent.ts
const Profiles = {
  ...
  follow: (username: string) =>
    requests.post(`/profiles/${username}/follow`, {}),
  unfollow: (username: string) => requests.del(`/profiles/${username}/follow`)
};

2. Add action in profileStore for these 2 actions
 @action follow = async (username: string) => {
    this.loading = true;
    try {
      await agent.Profiles.follow(username);
      runInAction(() => {
        this.profile!.following = true;
        this.profile!.followersCount++;
        this.loading = false;
      });
    } catch (error) {
      toast.error("Problem following user");
      runInAction(() => {
        this.loading = false;
      });
    }
  };

  @action unfollow = async (username: string) => {
    this.loading = true;
    try {
      await agent.Profiles.unfollow(username);
      runInAction(() => {
        this.profile!.following = false;
        this.profile!.followersCount--;
        this.loading = false;
      });
    } catch (error) {
      toast.error("Problem unfollowing user");
      runInAction(() => {
        this.loading = false;
      });
    }
  };

+++++++++++++++++Follow Unfollow Gui+++++++++++++++++
- In ProfileHeader, we are receiving {profile} in the parent ProfilePage
- We can also pass in const rootStore = useContext(RootStoreContext); in ProfileHeader but we will just be passing 
the additional properties/actions to the child

1. Destrcuture the new properties in ProfilePage
- Bringing in isCurrentUser to disable functionality if looing at own profile
const {
    ...
    follow,
    unfollow,
    isCurrentUser,
    loading
  } = rootStore.profileStore;

2. Pass these properties and catch in ProfileHeader
ProfilePage.tsx:
<ProfileHeader
    profile={profile!}
    isCurrentUser={isCurrentUser}
    follow={follow}
    unfollow={unfollow}
    loading={loading}
/>
...
ProfileHeader.tsx:
interface IProps {
  profile: IProfile;
  isCurrentUser: boolean;
  follow: (username: string) => Promise<void>;
  unfollow: (username: string) => Promise<void>;
  loading: boolean;
}

const ProfileHeader: React.FC<IProps> = ({
  profile,
  isCurrentUser,
  follow,
  unfollow,
  loading
}) => {

3. Implement isCurrentUser in Reveal component
{isCurrentUser && (
    <Reveal animated="move">
	...

4. Implement/toggle in buttons
<Reveal.Content visible style={{ width: "100%" }}>
<Button
    ...
    content={profile.following ? "Following" : "Not Following"}
/>
</Reveal.Content>
<Reveal.Content hidden>
<Button
    ...
	loading={loading}
    color={profile.following ? "red" : "green"}
    content={profile.following ? "Unfollow" : "Follow"}
/>
</Reveal.Content>

5. Handle button's onClick
- if profile.following then unfollow, else follow
<Button
    fluid
    basic
    color={profile.following ? "red" : "green"}
    content={profile.following ? "Unfollow" : "Follow"}
    onClick={
    profile.following
        ? () => unfollow(profile.username)
        : () => follow(profile.username)
    }
/>

6. Verify that the components are set as observer
!!!If we have observables we have to set the compoenent as observer to reflect the changes
export default observer(ProfilePage);
export default observer(ProfileHeader);

+++++++++++++++++View Followers, Following+++++++++++++++++
- We will be implementing Cards from semantic-ui

1. Create new files component for both followers, following
client-app\src\features\profiles\
ProfileFollowings.tsx
- type snippet s_20.12.1
- This will be enclosed in a <Tab.Pane> and will be rendered in the parent <Tab>
- Contains a <Card.Group itemsPerRow={5}>

ProfileCard.tsx
- type snippet s_20.12.2
- This is the <Card> item

2. Set in ProfileContent
const panes = [
  ...
    menuItem: "Followers",
    render: () => <ProfileFollowings />
  },
  {
    menuItem: "Following",
    render: () => <ProfileFollowings />
  }
];

3. Create api in agent.ts for listFollowings
const Profiles = {
  ...
  listFollowings: (username: string, predicate: string) =>
    requests.get(`/profiles/${username}/follow?predicate=${predicate}`)
};

4. Create action in profileStore
4.1 Add observable followings
@observable followings: IProfile[] = [];

4.2 Create action for loadFollowings
- Since we are looking at this method as a different user, we assume that profile will always be available 
- this.profile!.username

@action loadFollowings = async (predicate: string) => {
    this.loading = true;
    try {
      const profiles = await agent.Profiles.listFollowings(
        this.profile!.username,
        predicate
      );
      runInAction(() => {
        this.followings = profiles;
        this.loading = false;
      });
    } catch (error) {
      toast.error("Problem loading followings");
      runInAction(() => {
        this.loading = false;
      });
    }
  };

5. Use the method ProfileFollowings component
client-app\src\features\profiles\ProfileFollowings.tsx
5.1 Destructure in rootStore
const {
    profile,
    followings,
    loadFollowings,
    loading
  } = rootStore.profileStore;

5.2 To test we will check in a useEffect hook
  useEffect(() => {
    loadFollowings("following");
  }, [loadFollowings]);

5.3 Loop through the Card.Group, sepcify key, and then pass profile as IProps to ProfileCard
 <Card.Group itemsPerRow={5}>
    {followings.map(profile => {
        <ProfileCard key={profile.username} profile={profile} />;
    })}
    </Card.Group>

5.4 Catch in ProfileCard
interface IProps {
  profile: IProfile;
}

const ProfileCard: React.FC<IProps> = ({ profile }) => {
...

5.5 Use profile in ProfileCard.tsx
<Card as={Link} to={`/profile/${profile.username}`}>
      <Image src={profile.image || "/assets/user.png"} />
      <Card.Content>
        <Card.Header>{profile.displayName}</Card.Header>
      </Card.Content>
      <Card.Content extra>
        <div>
          <Icon name="user" />
          {profile.followersCount} Followers
        </div>
      </Card.Content>
    </Card>

+++++++++++++++++Use MobX Reactions to replace useEffect for followers/following tab+++++++++++++++++

- Replace hard-coded predicate for loadFollowings
  useEffect(() => {
    loadFollowings("following");
  }, [loadFollowings]);
- We will be using mobX to react to tab change as observables
- load followings based on tab clicked

++++++++++++Set Active Tab onClick++++++++++++
1. Create observable in profileStore
@observable activeTab: number = 0;

2. Create new action to set activeTab
  @action setActiveTab = (activeIndex: number) => {
    this.activeTab - activeIndex;
  };

3. Since ProfilePage (parent) has the rootStore declaration, we will just destructure setActiveTab here and pass
down to the childComponent (ProfileContent)
<ProfileContent setActiveTab={setActiveTab} />

4. Catch in ProfileContent as IProps
interface IProps {
  setActiveTab: (activeIndex: number) => void;
}

const ProfileContent: React.FC<IProps> = ({ setActiveTab }) => {
...

5. Handle setActiveTab in the Tab Component
- onTabChange has 2 parameters (event and data)
onTabChange={(e, data) => setActiveTab(data.activeIndex)}

!! error Argument of type 'string | number | undefined' is not assignable to parameter of type 'number'.
  Type 'undefined' is not assignable to type 'number'.

Resolution: we'll just set activeIndex to any for now

interface IProps {
  setActiveTab: (activeIndex: any) => void;
}

++++++++++++React on Active Tab Changing++++++++++++
1. Add reaction (mobX) in profileStore constructor
constructor(rootStore: RootStore) {
    this.rootStore = rootStore;

    reaction(
      () => this.activeTab,
      activeTab => {
        if (activeTab === 3 || activeTab === 4) {
          const predicate = activeTab === 3 ? "followers" : "following";
          this.loadFollowings(predicate);
        } else {
          this.followings = [];
        }
      }
    );
  }

2. Remove useEffect in ProfileFollowings

3. Modify conditional for the header text 
- People following ...
- People ... is following

const { ... activeTab } = rootStore.profileStore;
 <Header
    floated="left"
    icon="user"
    content={
        activeTab === 3
        ? `People following ${profile!.displayName}`
        : `People ${profile!.displayName} is following`
    }
	/>
