
++++++++++MEDIATR++++++++++
https://dotnetcoretutorials.com/2019/04/30/the-mediator-pattern-part-2-roll-your-own/
https://ardalis.com/using-mediatr-in-aspnet-core-apps

- Handler that brings list of objects from db
- Logic will be installed in the Applcation project
<Api Controller> ----> (Mediator.Send(object)) ----> Object ----> Handler ----> Object ----> <Api Controller> 

1. Install MediatR.Extensions.Microsoft.DependencyInjection in Application project
- View: Command Palette -> Nuget Package Manager: Add Package
- MediatR.Extensions.Microsoft.DependencyInjection 7.0
- Install in Application Project
- Restore in pop up window

Setup:
2. Create Handler in Application Project
- Create Folder Activities
- Create List.cs (For intial get activities Api)
- Naming convention reflects what this class will be doing

3. Create Handler class inside List.cs
public class Handler : IRequestHandler<Query, List<Activity>>
{
	private readonly DataContext _context;

	public Handler(DataContext context)
	{
		_context = context;
	}

	// From IRequestHandler interface
	public async Task<List<Activity>> Handle(Query request, CancellationToken cancellationToken)
	{
		var activities = await _context.Activities.ToListAsync();
		return activities;
	}
}

4. Provide MediatR as a service in Startup.cs
- services.AddMediatR(...
- Pass in the assmebly that our handlers are located in
- MediatR will look inside the Assembly for all the other handlers

services.AddMediatR(typeof(Application.Activities.List.Handler).Assembly);

++++++++++API++++++++++

1. Create ActivitiesController.cs
- derives ControllerBase (No view support unlike MVC that derives Controller, with View support)
- .Net will only be used as Api

2. Inject IMediator
private readonly IMediator _mediator;

public ActivitiesController(IMediator mediator)
{
    _mediator = mediator;
}

++++++++++API Operations++++++++++
- Api Controller is now extremely dumb, only 1 responsibility
- Extremely thin, absolute minimum code
- 1 task, receive requests
- use MediatR to respond to the request

1. List Activities
[HttpGet]
public async Task<ActionResult<List<Activity>>> List()
{
    return await _mediator.Send(new Application.Activities.List.Query());
}

2. Details of Activity
2.a Create Details.cs under Application/Activities
2.b Set Query with Guid Id property
public class Query : IRequest<Activity>
{
    public Guid Id { get; set; }
}
2.c Set Handler for FindAsync(id)
- Inject dbContext
public class Handler : IRequestHandler<Query, Activity>
{
    private readonly DataContext _context;

    public Handler(DataContext context)
    {
        _context = context;
    }

    public async Task<Activity> Handle(Query request, CancellationToken cancellationToken)
    {
        var activity = await _context.Activities.FindAsync(request.Id);
        return activity;
    }
}
3. Use in Api Controller with id parameter
[HttpGet("{id}")]
public async Task<ActionResult<Activity>> Details(Guid id)
{
    return await _mediator.Send(new Details.Query { Id = id });
}

!!! However we still have no proper error handling
e.g. when we find a Guid that does not exist the FindAsync method will return null
- We will be fixing this under validation, but most errors are being produced by having the [ApiController] attribute
- In cases of user cancelling midway, we could utilize CancellationTokens (see notes), however for simplicity this will not be used in the course

3. Create Command
3.1 Create.cs under Application/Activites
3.2 Copy all properties from Activity.cs from Domain, and paste to class Command : IRequest
public class Create
{
    public class Command : IRequest
    {
        public Guid Id { get; set; }
        public string Title { get; set; }
        public string Description { get; set; }
        public string Category { get; set; }
        public DateTime Date { get; set; }
        public string City { get; set; }
        public string Venue { get; set; }
    }
}
3.3 Create Handler class
- Take note that implementing IRequestHandler produces a method that returns Task<Unit>
- MediatR.Unit is just an empty object
public class Handler : IRequestHandler<Command>
{
    public Task<Unit> Handle(Command request, CancellationToken cancellationToken)
    {
        throw new NotImplementedException();
    }
}
3.4 Create constructor for this handler
private readonly DataContext _context;

public Handler(DataContext context)
{
    _context = context;
}
3.5 Implement Handle method
- change to async

Note regarding .AddAsync for _context.Activities.Add(activity);
- !this method is async only to allow special value generators, otherwise use non async
- we will be using non async as we do not need special value generators

public async Task<Unit> Handle(Command request, CancellationToken cancellationToken)
{
    var activity = new Activity
    {
        Id = request.Id,
        Title = request.Title,
        Description = request.Description,
        Category = request.Category,
        Date = request.Date,
        City = request.City,
        Venue = request.Venue

    };

    _context.Activities.Add(activity);
    var success = await _context.SaveChangesAsync() > 0;

    if (success) return Unit.Value;

    throw new Exception("Problem saving changes");
}

3.6 Use in Api Controller
[HttpPost]
public async Task<ActionResult<Unit>> Create(Create.Command command)
{
    return await _mediator.Send(command);
}

3.7 Test in Postman
under Body:
{
	"id": "{{$guid}}",
	"title": "Test Create Activity",
	"description": "Description of the test event",
	"category": "Culture",
	"date": "{{activityDate}}",
	"city": "London",
	"venue": "Tower of London"
}

"id": "{{$guid}}", // special Postman object, will create Guid for Id
"date": "{{activityDate}}", // variable declared under pre-request script

under: Pre-requisite script tab
var moment = require("moment");
pm.environment.set('activityDate', moment().add(14, 'days').toISOString());

4. Edit
4.1 Create as per Create.cs
4.2 Setup Handle()
- We do not have a mapping facility as of the moment
public async Task<Unit> Handle(Command request, CancellationToken cancellationToken)
{
    var activity = await _context.Activities.FindAsync(request.Id);

    if (activity == null)
        throw new Exception("Could not find activity");

    activity.Title = request.Title ?? activity.Title;
    activity.Description = request.Description ?? activity.Description;
    activity.Category = request.Category ?? activity.Category;
    activity.Date = request.Date ?? activity.Date;
    activity.City = request.City ?? activity.City;
    activity.Venue = request.Venue ?? activity.Venue;

    var success = await _context.SaveChangesAsync() > 0;

    if (success) return Unit.Value;

    throw new Exception("Problem saving changes");
}
4.3 Configure Api
[HttpPut("{id}")]
public async Task<ActionResult<Unit>> Edit(Guid id, Edit.Command command)
{
    command.Id = id;
    return await _mediator.Send(command);
}
4.4 Test in Postman

5. Delete
5.1 Create Delete.cs
public class Command : IRequest
{
    public Guid Id { get; set; }
}
...
var activity = await _context.Activities.FindAsync(request.Id);

if (activity == null)
    throw new Exception("Could not find activity");

_context.Remove(activity);
...

5.2 Use in Api
[HttpDelete("{id}")]
public async Task<ActionResult<Unit>> Delete(Guid id)
{
    return await _mediator.Send(new Delete.Command { Id = id });
}

