
+++++++++++++Common Store+++++++++++++
1. Create new Store
/src/app/stores/commonStore.ts
- Inject rootStore
export default class CommonStore {
  rootStore: RootStore;

  constructor(rootStore: RootStore) {
    this.rootStore = rootStore;
  }

2. Inject rootStore to commonStore
export class RootStore {
  ...
  commonStore: CommonStore;

  constructor() {
    ...
    this.commonStore = new CommonStore(this);
  }
  ...

3. Implement observables for token and appLoaded, set function getters/setters
...
@observable token: string | null = null;
@observable appLoaded = false;

@action setToken = (token: string) => {
window.localStorage.setItem("jwt", token);
this.token = token;
};

@action setAppLoaded = () => {
this.appLoaded = true;
};

4. In userStore login method, setToken
- Call setToken and pass the generated token

+++++++++++++Logout+++++++++++++

5. In userStore we could also implement the logout method by setting the token to null
- Set parameter for setToken to string or null, set token with non-null operator (token!)
  @action setToken = (token: string | null) => {
    window.localStorage.setItem("jwt", token!);
    this.token = token;
  };

@action logout = async () => {
    this.rootStore.commonStore.setToken(null);
    this.user = null;
  };

6. Implement logout in Navbar.tsx
- Destructure the logout action from the rootStore
const { ..logout } = rootStore.userStore;

- Implement on onClick
<Dropdown.Item onClick={logout} text="Logout" icon="power" />

7. Test Login, Verify on developer tools
- Applicaiton tab > Storage > Local Storage
- a "jwt" Key with value should be visible
- Test logout, the "jwt" key should now be set to null

8. Redirect to root after logout
history.push("/");


+++++++++++++Place token in Authorization Header+++++++++++++

1. Set interceptor in /src/app/api/agent.ts
- get the token that was saved in the localStorage
- if there is a token set the Request Header "Authorization key" with value = "bearer" + "token value"
- Like in Postman, this will simulate that the user is authenticated

axios.interceptors.request.use(
  config => {
    const token = window.localStorage.getItem("jwt");
    if (token) config.headers.Authorization = `Bearer ${token}`;
    return config;
  },
  error => {
    return Promise.reject(error);
  }
);

2. Logging in should now show Activities
- Verify in developer tools
- Under network tab  > Headers, verify that the request for activities:
a. Authorization with value bearer + token value
b. Sec-Fetch-Mode cors

!!! However refreshing the page still logouts the current user
- jwt token still exist
- verify jwt token in developer tools > Application tab > Storage > Local Storage

+++++++++++++Implement setAppLoaded, Check token+++++++++++++
Gist:
- Application initializiation
- When app is loaded, check token exist
- if exist, then we get current logged in user
- store this user in mobx store
- we'll use mobx Reactions
https://mobx.js.org/refguide/reaction.html
- In commonStore, if token changes, we trigger Reactions

1. In commonStore, add a Reaction in constructor
reaction(
    () => this.token,
    token => {
    if (token) {
        window.localStorage.setItem("jwt", token);
    } else {
        window.localStorage.removeItem("jwt");
    }
    }
);

Reaction 
	- accepts expression
	- specify what we want to react on (this.token)
	- next is the effect, what we want to do if the token is changed

ex. If @action setToken gets called, whenever we set the token the reaction triggers
- We can remove window.localStorage.setItem("jwt", token!); from @action setToken

2. Set  @observable initial value to the 'jwt' token
@observable token: string | null = window.localStorage.getItem("jwt");

3. Initialize App in App.tsx
- Get rootStore to get commonStore observables
const rootStore = useContext(RootStoreContext);
const { setAppLoaded, token } = rootStore.commonStore;

4. Create getUser in userStore.ts
@action getUser = async () => {
    try {
      const user = await agent.User.current();
      runInAction(() => {
        this.user = user;
      });
    } catch (error) {
      console.log(error);
    }
  };

5. Destructure getUser in App.tsx
const { getUser } = rootStore.userStore;

6. useEffect to see if we have a token
- if token exist get user from Api
- if we dont set App as loaded, redirect as usual

  useEffect(() => {
    if (token) {
      getUser().finally(() => setAppLoaded());
    } else {
      setAppLoaded();
    }
  }, [token, getUser, setAppLoaded]);

