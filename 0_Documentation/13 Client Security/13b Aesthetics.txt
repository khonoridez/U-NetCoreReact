
+++++++++++++Login Styles+++++++++++++
- HomePage.tsx
1. Get properties from userStore
const HomePage = () => {
  const rootStore = useContext(RootStoreContext);
  const { isLoggedIn, user } = rootStore.userStore;
...

2. Place in conditional to whether display Welcome or Login
{isLoggedIn && user ? (...Welcome) : (...Login)

{isLoggedIn && user ? (
        <Fragment>
        <Header
            as="h2"
            inverted
            content={`Welcome back ${user.displayName}`}
        />
        <Button as={Link} to="/activities" size="huge" inverted>
            Go to activities
        </Button>
        </Fragment>
    ) : (
        <Fragment>
        <Header as="h2" inverted content="Welcome to Reactivities" />
        <Button as={Link} to="/login" size="huge" inverted>
            Login
        </Button>
        </Fragment>
    )}

3. Prepare Register button
<Button as={Link} to="/login" size="huge" inverted>
    Login
</Button>
<Button as={Link} to="/register" size="huge" inverted>
    Register
</Button>

+++++++++++++HomePage NavBar+++++++++++++
- NavBar.tsx
1. Get properties from userStore
const NavBar: React.FC = () => {
  const rootStore = useContext(RootStoreContext);
  const { user } = rootStore.userStore;

2. Create Menu Item inside conditional statement
- type snippet s_13.6.1

3. Adjust menu item properties

{user && (
    <Menu.Item position="right">
    <Image
        avatar
        spaced="right"
        src={user.image || "/assets/user.png"}
    />
    <Dropdown pointing="top left" text={user.displayName}>
        <Dropdown.Menu>
        <Dropdown.Item
            as={Link}
            to={`/profile/username`}
            text="My profile"
            icon="user"
        />
        <Dropdown.Item text="Logout" icon="power" />
        </Dropdown.Menu>
    </Dropdown>
    </Menu.Item>
)}

!! Refreshing the page resets the store and loses the user

+++++++++++++Login Form Modal+++++++++++++
https://react.semantic-ui.com/modules/modal/
- Modals can live anywhere in the application
- Control opening and closing of modal from mobx store

1. Copy sample from semanti-ui  and setup a new file for the modal
- src/app/common/modals/ModalContainer.tsx

const ModalContainer = () => {
  return (
    <Modal>
      <Modal.Content>Component will go here</Modal.Content>
    </Modal>
  );
};

2. Create src/app/stores/modalStore.ts
- Inject in rootStore

export default class ModalStore {
  rootStore: RootStore;

  constructor(rootStore: RootStore) {
    this.rootStore = rootStore;
  }
...
export class RootStore {
 ...
  modalStore: ModalStore;

  constructor() {
    ...
    this.modalStore = new ModalStore(this);
  }

3. Create observables for modal and modal functions (open, close)
export default class ModalStore {
...
   @observable modal = {
    open: false,
    body: null
  };

  @action openModal = (content: any) => {
    this.modal.open = true;
    this.modal.body = content;
  };

  @action closeModal = () => {
    this.modal.open = false;
    this.modal.body = null;
  };
  ...

4.  Implement in ModalContainer
- Get modalStore from rootStore
- Set ModalContainer as observer

const ModalContainer = () => {
  const rootStore = useContext(RootStoreContext);
  const {
    modal: { open, body },
    closeModal
  } = rootStore.modalStore;

  return (
    <Modal open={open} onClose={closeModal} size="mini">
      <Modal.Content>Component will go here</Modal.Content>
    </Modal>
  );
  ...
export default observer(ModalContainer);

5. Declare modal high up in application
- App.tsx
...
return (
    <Fragment>
      <ModalContainer />
	  ...

6. Handle in Home Page onClick

const HomePage = () => {
  ...
  const { openModal } = rootStore.modalStore;
  ...
  <Button onClick={() => openModal("test")} size="huge" inverted>
    Login
</Button>
- Test if modal shows

7. Set content inside modal
...
<Button
    onClick={() => openModal(<LoginForm />)}
    size="huge"

8. Set observable modal to shallow
https://mobx.js.org/refguide/modifiers.html

@observable.shallow modal = {
    open: false,
    body: null
  };

9. Style LoginForm.tsx
- Add Header, Set Button to fluid
- Remove the JSON.stringify content
<Form onSubmit={handleSubmit}>
    <Header
    as="h2"
    content="Login to Reactivities"
    color="teal"
    textAlign="center"
    />
	...

	<Button
    ...
    fluid
    />

+++++++++++++Validation Error Message+++++++++++++
https://react.semantic-ui.com/collections/message/
- Negative/Error: A message may be formatted to display a negative message.
1. Create new file /src/app/common/form/ErrorMessage.tsx
interface IProps {
  error: AxiosResponse;
  text?: string;
}

const ErrorMessage: React.FC<IProps> = ({ error, text }) => {
  return (
    <Message error>
      <Message.Header>{error.statusText}</Message.Header>
      {text && <Message content={text} />}
    </Message>
  );
};

2. Implement in LoginForm.tsx
{submitError && !dirtySinceLastSubmit && (
<ErrorMessage
    error={submitError}
    text="Invalid  username or password"
/>
)}

+++++++++++++Register Form+++++++++++++

1. Create new file Register Form
- copy contents of LoginForm and paste, rename
- src/features/user/RegisterForm.tsx

2. Create register method in userStore
- after pasing to the register method we will already have a token available
- also set the modal to close before redirecting
 @action register = async (values: IUserFormValues) => {
    try {
      const user = await agent.User.register(values);
      this.rootStore.commonStore.setToken(user.token);
      this.rootStore.modalStore.closeModal();
      history.push("/activities");
    } catch (error) {
      throw error;
    }
  };

3. Adjust RegisterForm
- add register form fields and validation
...
const validate = combineValidators({
  ...
  username: isRequired("User Name"),
  displayName: isRequired("Display Name"),
});
...
<Field
    name="username"
    component={TextInput}
    placeholder="User Name"
    />
    <Field
    name="displayName"
    component={TextInput}
    placeholder="Display Name"
    />

4. Comment out validate to verify validation errors receiving from server
<FinalForm
    ...
    //validate={validate}
...

5. Handle RegisterForm on REgister Button in homepage
<Button
    onClick={() => openModal(<RegisterForm />)}
    size="huge"
    inverted
>
    Register
</Button>

6. Verify validation errors under dev tools > Network > Preview Tab
ex. 
errors: {Email: ["'Email' is not a valid email address."],…}
Email: ["'Email' is not a valid email address."]
	0: "'Email' is not a valid email address."
Password: ["Password must contain 1 uppercase letter", "Password must contain a number",…]
	0: "Password must contain 1 uppercase letter"
	1: "Password must contain a number"
	2: "Password must contain non alphanumeric"

7. Modify error message temporarily to display these list of errors
{submitError && !dirtySinceLastSubmit && (
    <ErrorMessage
        error={submitError}
        text={JSON.stringify(submitError.data.errors)}
    />
    )}

ex. output
Bad Request
{"Email":["'Email' must not be empty."],"Password":["'Password' must not be empty."],"UserName":["'User Name' must not be empty."],"DisplayName":["'Display Name' must not be empty."]}

+++++++++++++Format Validation Errors+++++++++++++
- Flatten error list to a single array

1. Modify ErrorMessage.tsx
- we used .flat() to get all sub-array elements and then .map to render it as Message List

<Message error>
    <Message.Header>{error.statusText}</Message.Header>
    {error.data && Object.keys(error.data.errors).length > 0 && (
    <Message.List>
        {Object.values(error.data.errors)
        .flat()
        .map((err, i) => (
            <Message.Item key={i}>{err}</Message.Item>
        ))}
    </Message.List>
    )}
    {text && <Message.Content content={text} />}
</Message>

- this should  now show up as a bulledlist
Bad Request
- 'Email' must not be empty.
- 'Password' must not be empty.
- 'User Name' must not be empty.
- 'Display Name' must not be empty.