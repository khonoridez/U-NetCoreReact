
+++++++++++++Outline+++++++++++++

1. Axios interceptors
- request, with token
- authenticate to server
2. Root Mobx Stores
- Parent for other Stores
3. Submission errors
- Coming back from Api
4. Modals
- Pop up window form
- But cannot access toast error message

+++++++++++++FAQ+++++++++++++

1. Is it safe to store our token in Local Storage
- Depends, We will look at securing our application at the end
- Attacker can get the token via Cross-site scripting attack
- We will address this later on the end of course

+++++++++++++Configuration+++++++++++++
- Create corresponding interface coming from Api (From User.cs in Application project)
1.Create interface for the User with Token
- client-app/src/app/models/user.ts
export interface IUser {
  username: string;
  displayName: string;
  description: string;
  token: string;
  image?: string;
}

2.Create interface for the User for the Register method (Register.cs in Application project)
export interface IUserFormValues {
  email: string;
  password: string;
  displayName?: string;
  username?: string;
}

3. Create Api methods (agent.ts)
...
const User = {
  current: (): Promise<IUser> => requests.get("/user"),
  login: (user: IUserFormValues): Promise<IUser> =>
    requests.post("/login/", user),
  register: (user: IUserFormValues): Promise<IUser> =>
    requests.post("/register/", user)
};

export default { ..., User };

4. Create userStore.ts
export default class UserStore {
  @observable user: IUser | null = null;

  @computed get isLoggedIn() {
    return !!this.user;
  }

  @action login = async (values: IUserFormValues) => {
    try {
      const user = await agent.User.login(values);
      this.user = user;
    } catch (error) {
      console.log(error);
    }
  };
}

+++++++++++++Create Root Store and we pass this to the components+++++++++++++
- Currently we have createContext that passes a new ActivityStore
export default createContext(new ActivityStore());

1. Create rootStore.ts
- Modify ActivityStore and move createContext to the RootStore
- Create variables (activityStore, userStore)

2. Create constructor to initialize both stores, by passing this rootstore in each store's constructor
constructor() {
    this.activityStore = new ActivityStore(this);
    this.userStore = new UserStore(this);
  }

3. Export new RootStoreContext via createContext
export const RootStoreContext = createContext(new RootStore());

4. Add RootStore in both stores' constructors
export default class UserStore {
  rootStore: RootStore;

  constructor(rootStore: RootStore) {
    this.rootStore = rootStore;
  }
  ...

5. Usage:
- If we need specific stores, we can access stores inside the rootStore
this.rootStore.activityStore.loadActivities....

6. Fix errors for activityStore changes, use RootStoreContext
const rootStore = useContext(RootStoreContext);

7. Destructure to get activityStore props

ActivityForm.tsx
From: 
const activityStore = useContext(ActivityStore);
const {
	createActivity,
	editActivity,
	submitting,
	loadActivity
} = activityStore;
To:
const rootStore = useContext(RootStoreContext);
const {
	createActivity,
	editActivity,
	submitting,
	loadActivity
} = rootStore.activityStore;

ActivityDashboard.tsx
From:
const activityStore = useContext(ActivityStore);

useEffect(() => {
activityStore.loadActivities();
}, [activityStore]);

if (activityStore.loadingInitial)
To: 
const rootStore = useContext(RootStoreContext);
const { loadActivities, loadingInitial } = rootStore.activityStore;

useEffect(() => {
loadActivities();
}, [loadActivities]);

if (loadingInitial)


