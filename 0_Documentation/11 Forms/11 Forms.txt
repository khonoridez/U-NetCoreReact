
+++++++++++++Outline+++++++++++++

1. npm React Final Form
2. Validating forms with Revalidate


+++++++++++++Load Activity in ActivityForm+++++++++++++
- ex. Loading of activity details when Editing
- We do not want details coming from an observable (initialFormState), it is loading multiple times
- initialFormState changes mutliple times in useEffect()
- We want to get the activity from the Api

1. In ActivityStore, loadActivity. 
- set return activity upon retrieving from Api
 @action loadActivity = async (id: string) => {
    let activity = this.getActivity(id);
    if (activity) {
      this.activity = activity;
      return activity;
    } else {
      this.loadingInitial = true;
      try {
        activity = await agent.Activities.details(id);
        runInAction("getting activity", () => {
          activity.date = new Date(activity.date);
          this.activity = activity;
          this.loadingInitial = false;
        });
        return activity;
      } catch (error) {
        runInAction("getting activity error", () => {
          this.loadingInitial = false;
        });
        console.log(error);
      }
    }
  };

2. Modify useEffect of ActivityForm
from:
  useEffect(() => {
    if (match.params.id && !activity.id) {
      loadActivity(match.params.id).then(
        () => initialFormState && setActivity(initialFormState)
      );
    }

    return () => {
      clearActivity();
    };
  }, [
    match.params.id,
    loadActivity,
    initialFormState,
    clearActivity,
    activity.id
  ]);
to: 
 useEffect(() => {
    if (match.params.id) {
      loadActivity(match.params.id).then(activity => setActivity(activity));
    }
  }, [match.params.id, loadActivity]);

- Since we are returning activity in Api, we could remove initialFormState, activity.id, and clearActivity method
- useEffect will now only trigger with changes on 2 depeepndencies (match.paramns.id, loadActivity)

!!!going to edit ({url}/manage/f03479d5-4113-4fff-b103-6b6023a32adc) now triggers the loadActivity once

3. Instead of using interface IActivityFormValues,  we could create a new class and initialize the values in constructor
3.1 Create new class under activity.ts
- mover initialization from ActivityForm useState to here:
export class ActivityFormValues implements IActivityFormValues {
  id?: string = undefined;
  title: string = "";
  category: string = "";
  description: string = "";
  date?: Date = undefined;
  time?: Date = undefined;
  city: string = "";
  venue: string = "";
}

3.2 Create constructor and set the values depending if Editing existing or Creating new
- Automatically map properties inside the "init" object to the propertines inside the class (this)
constructor(init?: IActivityFormValues) {
    if (init && init.date) {
      init.time = init.date;
    }
    Object.assign(this, init);
  }

3.3 Use in ActivityForm
- use an empty ActivityFormValues() - for new activities
- load activity values - for Edit
const [activity, setActivity] = useState(new ActivityFormValues());

  useEffect(() => {
    if (match.params.id) {
      loadActivity(match.params.id).then(activity =>
        setActivity(new ActivityFormValues(activity))
      );
    }
  }, [match.params.id, loadActivity]);

3.4 Set initalvalues in React FinalForm
...
<FinalForm
	initialValues={activity}
...

Loading values in form should now work for Edit, Create

3.5 Set loading indicator
- Set local props
const [loading, setLoading] = useState(false);

- Initialize in finally block
  useEffect(() => {
    if (match.params.id) {
      setLoading(true);
      loadActivity(match.params.id)
        ...
        .finally(() => setLoading(false));
    }
	...

- Segmet has loading property
- <Segment clearing>, clearing flag for the buttons affects the visibility of loading indicator
- We will put this inside <Form instead

<Form onSubmit={handleSubmit} loading={loading}>

- disable Buttons when loading
<Button
    content="Submit"
	disabled={loading}
    ...
/>
<Button
    content="Cancel"
    disabled={loading}
	...
/>

