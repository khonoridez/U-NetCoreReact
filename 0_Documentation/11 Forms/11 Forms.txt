
+++++++++++++Outline+++++++++++++

1. npm React Final Form
2. Validating forms with Revalidate


+++++++++++++Implement React Final Form+++++++++++++
1. install Final Form
npm install react-final-form final-form

2. import Form as FinalForm to avoid confilct with Semantic UI
import { Form as FinalForm, Field } from "react-final-form";

3. Create handler for FinalForm submit
  const handleFinalFormSubmit = (values: any) => {
    console.log(values);
  };

4. Wrap Final Form around Semantic UI Form
<FinalForm
    onSubmit={handleFinalFormSubmit}
    render={({ handleSubmit }) => (
        <Form onSubmit={handleSubmit}>
        <Form.Input
            onChange={handleInputChange}
            name="title"
            placeholder="Title"
            value={activity.title}
        />
		....
5. Comment out handleSubmit
6. Replace Form.Input to a Field
<Field
    name="title"
    placeholder="Title"
    value={activity.title}
    component="input"
/>

7. Verify if handleFinalFormSubmit is working

+++++++++++++TextInput Resuable Component+++++++++++++

1. Create new file TextInput.tsx
- src/app/common/form/TextInput.tsx

2. Add imports and destructure Props to get fields that we will be using
- extend from FieldRenderProps, FormFieldProps to get specific fields here

interface IProps
  extends FieldRenderProps<string, HTMLInputElement>,
    FormFieldProps {}

const TextInput: React.FC<IProps> = ({
  input,
  width,
  type,
  placeholder,
  meta: { touched, error }
}) => {
  return <div></div>;
};

3. Implement Input in return
- spread properties of input to attach to the input in this template
- check error with meta from FieldRenderProps in React FinalForm
- set Form.Field (Semanti-UI) type and width
- 

return (
    <Form.Field error={touched && !!error} type={type} width={width}>
      <input {...input} placeholder={placeholder} />
      {touched && error && (
        <Label basic color="red">
          {error}
        </Label>
      )}
    </Form.Field>
  );

4. Use inside ActivityForm
<Field
    name="title"
    ...
    component={TextInput}
/>

+++++++++++++TextArea Resuable Component+++++++++++++
1. Create new file TextAreaInput.tsx
- src/app/common/form/TextAreaInput.tsx

2. Copy code from TextInput and change some variales for TextArea
<Form.Field error={touched && !!error} width={width}>
      <textarea rows={rows} {...input} placeholder={placeholder} />
      {touched && error && (
        <Label basic color="red">
          {error}
        </Label>
      )}
    </Form.Field>


+++++++++++++SelectInput Resuable Component+++++++++++++
1. Create new file SelectInput.tsx
- src/app/common/form/SelectInput.tsx
2. Copy code from TextInput and change some variales for SelectInput
<Form.Field error={touched && !!error} width={width}>
    <Select
    value={input.value}
    onChange={(e, data) => input.onChange(data.value)}
    placeholder={placeholder}
    options={options}
    />
    {touched && error && (
    <Label basic color="red">
        {error}
    </Label>
    )}
</Form.Field>
- input is from FieldRenderProps<string, HTMLSelectElement>,

3. Create file categoryOptions.ts
- src/app/common/options/categoryOptions.ts
-type snippet s_11.7.1

+++++++++++++Date Resuable Component+++++++++++++
https://jquense.github.io/react-widgets/api/DateTimePicker/

1. Install widgets
npm install react-widgets react-widgets-date-fns
!!Error with react-widgets
Could not find a declaration file for module 'react-widgets-date-fns'
!!Error with 'npm install @types/react-widgets-date-fns'
- add a new declaration (.d.ts) file containing `declare module 'react-widgets-date-fns';`
!!Error with react-widgets
npm install @types/react-widgets

2. Create Date File, client-app\src\app\common\form\DateInput.tsx
<Form.Field error={touched && !!error} width={width}>
    <DateTimePicker
    placeholder={placeholder}
    value={input.value || null}
    onChange={input.onChange}
    {...rest}
    />
    {touched && error && (
    <Label basic color="red">
        {error}
    </Label>
    )}
</Form.Field>

- use DateTimePicker from react-widgets
- value is changed to include null, this is 
value={input.value || null}
- include onChange={input.onChange}
- include spread ...rest to copy remaining Props to the DatePicker

3. Use this DateInput in AcrtivityForm.tsx
 <Field
    component={DateInput}
    name="date"
    type="datetime-local"
    placeholder="Date"
    value={activity.date!}
/>

!!Error: interface is of type string

+++++++++++++Changing Date Type to Date+++++++++++++
!!Error: Objects are not valid as a React child
- We cant render objects (ex. Date) in render functions
- We have to render them as something displayable
- We will have to use date-fns, convert to something that the browser can display

1. Change interface date type
export interface IActivity {
  ...
  date: Date | null;
  ...
}

- Temporary
- not date?: Date;
- this pertains to Date | undefined;
- we need Date | null;

2. In ActivityForm we have to specify that date is of Non-null assertion
<Field
	...
	value={activity.date!}
/>

3. In ActivityStore in groupActivitiesByDate we have to change string comparison of activity.date

groupActivitiesByDate(activities: IActivity[]) {
    const sortedActivities = activities.sort(
      (a, b) => a.date!.getTime() - b.date!.getTime()
    );

4. In loadActivities we pass a new Date object
@action loadActivities = async () => {
    this.loadingInitial = true;
    try {
      const activities = await agent.Activities.list();
      runInAction("loading activities", () => {
        activities.forEach(activity => {
          activity.date = new Date(activity.date!);

5. format all usage of activity.date using date-fns
import { format } from "date-fns";
- in ActivityListItem, 
<Icon name="clock" /> {format(activity.date!, "h:mm a")}
- in ActivityDetailedHeader
<p>{format(activity.date!, "eeee do MMMM")}</p>
- in ActivityDetailedInfo
<Grid.Column width={15}>
    <span>
        {format(activity.date!, "eeee do MMMM")} at{" "}
        {format(activity.date!, "h:mm a")}
    </span>
</Grid.Column>
