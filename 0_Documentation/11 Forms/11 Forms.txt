
+++++++++++++Outline+++++++++++++

1. npm React Final Form
2. Validating forms with Revalidate


+++++++++++++Implement React Final Form+++++++++++++
1. install Final Form
npm install react-final-form final-form

2. import Form as FinalForm to avoid confilct with Semantic UI
import { Form as FinalForm, Field } from "react-final-form";

3. Create handler for FinalForm submit
  const handleFinalFormSubmit = (values: any) => {
    console.log(values);
  };

4. Wrap Final Form around Semantic UI Form
<FinalForm
    onSubmit={handleFinalFormSubmit}
    render={({ handleSubmit }) => (
        <Form onSubmit={handleSubmit}>
        <Form.Input
            onChange={handleInputChange}
            name="title"
            placeholder="Title"
            value={activity.title}
        />
		....
5. Comment out handleSubmit
6. Replace Form.Input to a Field
<Field
    name="title"
    placeholder="Title"
    value={activity.title}
    component="input"
/>

7. Verify if handleFinalFormSubmit is working

+++++++++++++TextInput Resuable Component+++++++++++++

1. Create new file TextInput.tsx
- src/app/common/form/TextInput.tsx

2. Add imports and destructure Props to get fields that we will be using
- extend from FieldRenderProps, FormFieldProps to get specific fields here

interface IProps
  extends FieldRenderProps<string, HTMLInputElement>,
    FormFieldProps {}

const TextInput: React.FC<IProps> = ({
  input,
  width,
  type,
  placeholder,
  meta: { touched, error }
}) => {
  return <div></div>;
};

3. Implement Input in return
- spread properties of input to attach to the input in this template
- check error with meta from FieldRenderProps in React FinalForm
- set Form.Field (Semanti-UI) type and width
- 

return (
    <Form.Field error={touched && !!error} type={type} width={width}>
      <input {...input} placeholder={placeholder} />
      {touched && error && (
        <Label basic color="red">
          {error}
        </Label>
      )}
    </Form.Field>
  );

4. Use inside ActivityForm
<Field
    name="title"
    ...
    component={TextInput}
/>

+++++++++++++TextArea Resuable Component+++++++++++++
1. Create new file TextAreaInput.tsx
- src/app/common/form/TextAreaInput.tsx

2. Copy code from TextInput and change some variales for TextArea
<Form.Field error={touched && !!error} width={width}>
      <textarea rows={rows} {...input} placeholder={placeholder} />
      {touched && error && (
        <Label basic color="red">
          {error}
        </Label>
      )}
    </Form.Field>


+++++++++++++SelectInput Resuable Component+++++++++++++
1. Create new file SelectInput.tsx
- src/app/common/form/SelectInput.tsx
2. Copy code from TextInput and change some variales for SelectInput
<Form.Field error={touched && !!error} width={width}>
    <Select
    value={input.value}
    onChange={(e, data) => input.onChange(data.value)}
    placeholder={placeholder}
    options={options}
    />
    {touched && error && (
    <Label basic color="red">
        {error}
    </Label>
    )}
</Form.Field>
- input is from FieldRenderProps<string, HTMLSelectElement>,

3. Create file categoryOptions.ts
- src/app/common/options/categoryOptions.ts
-type snippet s_11.7.1
