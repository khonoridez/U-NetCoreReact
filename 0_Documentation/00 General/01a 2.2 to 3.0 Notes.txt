

++++++++++Main Article Link++++++++++
https://docs.microsoft.com/en-us/aspnet/core/migration/22-to-30?view=aspnetcore-3.0&tabs=visual-studio

++++++++++HostBuilder replaces WebHostBuilder++++++++++

The ASP.NET Core 3.0 templates use Generic Host. Previous versions used Web Host. 
The following code shows the ASP.NET Core 3.0 template generated Program class:

public static IHostBuilder CreateHostBuilder(string[] args) =>
        Host.CreateDefaultBuilder(args)
            .ConfigureWebHostDefaults(webBuilder =>
            {
                webBuilder.UseStartup<Startup>();
            });

The most significant change from WebHostBuilder to HostBuilder is in dependency injection (DI). When using HostBuilder, you can only inject the following into Startup's constructor:

    IConfiguration
    Microsoft.Extensions.Hosting.IHostEnvironment
    IWebHostEnvironment

The HostBuilder DI constraints:

    Enable the DI container to be built only one time.
    Avoids the resulting object lifetime issues like resolving multiple instances of singletons.


++++++++++Authorization Policy++++++++++
https://docs.microsoft.com/en-us/aspnet/core/migration/22-to-30?view=aspnetcore-3.0&tabs=visual-studio

++++++++++FallbackPolicy vs  DefaultPolicy++++++++++

services.AddAuthorization(opt =>
{
    opt.FallbackPolicy = new AuthorizationPolicyBuilder()
        .RequireAuthenticatedUser()
        .Build();
});

vs.

services.AddAuthorization(opt =>
{
    opt.DefaultPolicy = new AuthorizationPolicyBuilder()
        .RequireAuthenticatedUser()
        .Build();
});
...
app.UseEndpoints(endpoints =>
{
    endpoints.MapControllers().RequireAuthorization();
});


- The DefaultPolicy is triggered by [Authorize] or RequireAuthorization, while the FallbackPolicy is triggered when 
no other policy is set. FallbackPolicy is initially configured to allow requests without authorization.

++++++++++++++Password Settings++++++++++++++

https://docs.microsoft.com/en-us/aspnet/core/security/authentication/identity-configuration?view=aspnetcore-3.0

By default, Identity requires that passwords contain an uppercase character, lowercase character, a digit, and a non-alphanumeric 
character. Passwords must be at least six characters long. PasswordOptions can be set in Startup.ConfigureServices.

services.Configure<IdentityOptions>(options =>
{
    // Default Password settings.
    options.Password.RequireDigit = true;
    options.Password.RequireLowercase = true;
    options.Password.RequireNonAlphanumeric = true;
    options.Password.RequireUppercase = true;
    options.Password.RequiredLength = 6;
    options.Password.RequiredUniqueChars = 1;
});

++++++++++++++Routing and Endpoints++++++++++++++
Configure Routing
ex. in Tuts netcore 2.2
.UseMvc
.MapSpaFallbackRoute

switch to:
https://stackoverflow.com/questions/57822512/what-is-equivalent-to-mapspafallbackroute-for-asp-net-core-3-0-endpoints
https://docs.microsoft.com/en-us/aspnet/core/migration/22-to-30?view=aspnetcore-3.0&tabs=visual-studio

app.UseEndpoints(endpoints =>
{
    endpoints.MapHub<ChatHub>("/chat");
    endpoints.MapControllers();

    endpoints.MapFallbackToController("Fallback", "Home");
});

++++++++++++++Course Update Nov 2019++++++++++++++

1. Replace Newtonsoft with System.Text.Json
Newtonsoft.Json.JsonPropertyAttribute
From:
[JsonProperty("attendees")]
To:
using System.Text.Json.Serialization;
...
[JsonPropertyName("attendees")]

https://docs.microsoft.com/en-us/dotnet/standard/serialization/system-text-json-how-to?view=netcore-3.0#serialize-to-formatted-json
https://www.c-sharpcorner.com/article/the-new-json-serializer-in-net-core-3/
https://devblogs.microsoft.com/dotnet/try-the-new-system-text-json-apis/
https://michaelscodingspot.com/the-battle-of-c-to-json-serializers-in-net-core-3/
https://riptutorial.com/json-net/example/6594/how-to-serialize-an-object-to-json-using-json-net-in-csharp
