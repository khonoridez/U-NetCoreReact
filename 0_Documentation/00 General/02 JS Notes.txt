
++++++++++TODO Notes on++++++++++

1. Spread Syntax
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax

ex:
var obj1 = { foo: 'bar', x: 42 };
var obj2 = { foo: 'baz', y: 13 };

var clonedObj = { ...obj1 };
// Object { foo: "bar", x: 42 }

var mergedObj = { ...obj1, ...obj2 };
// Object { foo: "baz", x: 42, y: 13 }

2. Destructuring JavaScript Objects
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\

//basic example:
var o = {p: 42, q: true};
var {p, q} = o;
console.log(p); // 42
console.log(q); // true 

//assigning new variable names:
var o = {p: 42, q: true};
var {p: foo, q: bar} = o;
console.log(foo); // 42 
console.log(bar); // true

3. Union Type
https://www.tutorialspoint.com/typescript/typescript_union.htm
ex.:
interface IProps {
  activity: IActivity | null;
}

4. Non-null assertion operator
https://stackoverflow.com/questions/42273853/in-typescript-what-is-the-exclamation-mark-bang-operator-when-dereferenci
- the operation x! produces a value of the type of x with null and undefined excluded
- This expression cannot be null or undefined here, so don't complain about the possibility of it being null or undefined

<ActivityForm setEditMode={setEditMode} activity={selectedActivity!} />

++++++++++Promise Resolve Callback++++++++++
- The Promise object represents the eventual completion (or failure) of an asynchronous operation, and its resulting value.
- this is a promise resolve callback (used in axios):

then(() => {

Note: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise

....
const date = new Promise(function(resolve, reject) {
  if (weather) {
    const dateDetails = {
      name:     'Cubana Restaurant',
      location: '55th Street',
      table:    5
    };

    resolve(dateDetails)
  } else {
    reject(new Error('Bad weather, so no Date'))
  }
});
....

// Using a promise that has been created is relatively straightforward; we chain .then() and .catch() to our Promise like so:

const myDate = function() {
  date
    .then(function(done) {
      console.log('We are going on a date!')
      console.log(done)
    })
    .catch(function(error) {
        console.log(error.message)
    })
}

myDate();

.then() receives a function with an argument which is the resolve value of our promise. 
.catch returns the reject value of our promise.
....

Output:
We are going on a date!
{
  name: 'Cubana Restaurant',
  location: '55th Street'
  table: 5
}

5. Optional variables
https://www.typescriptlang.org/docs/handbook/variable-declarations.html

++++++++++Currying++++++++++
https://www.sitepoint.com/currying-in-functional-javascript/

ex. sleep function:

const sleep = (ms: number) => (response: AxiosResponse) =>
  new Promise<AxiosResponse>(resolve =>
    setTimeout(() => resolve(response), ms)
  );

usage:
...
axios
      .get(url)
      .then(sleep(1000))
      .then(responseBody)

6. Decorators
https://www.typescriptlang.org/docs/handbook/decorators.html

7. Never[]

8. Higher order components

9. async await
https://javascript.info/async-await

10. getter
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get
ex.
var obj = {
  log: ['a', 'b', 'c'],
  get latest() {
    if (this.log.length == 0) {
      return undefined;
    }
    return this.log[this.log.length - 1];
  }
}

11. Generics and Types
https://www.typescriptlang.org/docs/handbook/generics.html

12. reduce method
https://www.w3schools.com/jsref/jsref_reduce.asp
https://codeburst.io/learn-understand-javascripts-reduce-function-b2b0406efbdc

ex.
const numbers = [1,-1,2,3];
let sum=0;
for (let n of numbers)
	sum +=n;
console.log(sum);
...
const numbers = [1,-1,2,3];
const sum = numbers.reduce((accumulator, currentValue) => {
	return accumulator + currentValue;
}, 0);

- reduce has 2 parameters, 1st is a callback fn and the next is the initial value of the "accumulator"
- accumulator value is 0
- 1st rd value is 0, accumulator will be 1, accumulator + 1
- 2nd rd value is 1,  accumulator will be -1, accumulator(1) + (-1)
- 3rd rd value is 0,  accumulator will be 2, accumulator(0) + (2)
- 4th rd value is 2,  accumulator will be 3, accumulator(2) + (3) = 5

- we can exclude the initial value,  accumulator will get the 1st element
const sum = numbers.reduce((accumulator, currentValue) => {
	return accumulator + currentValue;
});
- 1st rd value is 1, accumulator will be 1, accumulator + second elememt(-1)

- we can remove the curly {} and remove
const sum = numbers.reduce((accumulator, currentValue) => accumulator + currentValue);

13. Array.from
-  creates a new, shallow-copied Array instance from an array-like or iterable object.
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from

- Iterable Iterator
Iterable objects is a generalization of arrays. That’s a concept that allows to make any object useable in a for..of loop.
https://javascript.info/iterable

14. Object.entries(...
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries
The Object.entries() method returns an array of a given object's own enumerable string-keyed property [key, value] pairs,

const object1 = {
  a: 'somestring',
  b: 42
};

for (let [key, value] of Object.entries(object1)) {
  console.log(`${key}: ${value}`);
}

15. .date.split("T")[0];
https://www.w3schools.com/jsref/jsref_split.asp

16. extends keyword
interface IProps
  extends FieldRenderProps<string, HTMLInputElement>,
    FormFieldProps {}

17. double excalamation mark 
- ex. return a boolean if we have an error
!!error

18. double asterisk?
https://stackoverflow.com/questions/33284569/is-the-double-asterisk-a-valid-javascript-operator
sample:
/**/*.ts

19. optional parameter ?
date?: Date;
- this pertains to Date | undefined and not Date | null

20. ...rest
https://stackoverflow.com/questions/43484302/what-does-it-mean-rest-in-react-jsx

ex.:
const myObj = {
  name: 'John Doe',
  age: 35,
  sex: 'M',
  dob: new Date(1990, 1, 1)
};

For this example, it may help to just think of props as having the same structure (i.e., properties and values) as shown in myObj. 

const { name: Username, ...rest } = myObj

console.log(Username);
// => John Doe

console.log(rest);
// => { age: 35, sex: 'M', dob: Mon Jan 01 1990 00:00:00 GMT-0800 (PST) }

21. date toISOString
https://www.w3schools.com/jsref/jsref_toisostring.asp

22. ... extends Partial<T>
- get all properties from parent interface but set as optional?

23. Interface, Class declarations
- Automatically map properties inside the "init" object to the propertines inside the class (this)
export class ActivityFormValues implements IActivityFormValues {
  id?: string = undefined;
  title: string = "";
  category: string = "";
  description: string = "";
  date?: Date = undefined;
  time?: Date = undefined;
  city: string = "";
  venue: string = "";

  constructor(init?: IActivityFormValues) {
    if (init && init.date) {
      init.time = init.date;
    }
    Object.assign(this, init);
  }
}

24. Promise.reject()
- The Promise.reject() method returns a Promise object that is rejected with a given reason.
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/reject

25. Object.values.flat and .map
- Used in Validation errors to render as bulleted list
- The flat() method creates a new array with all sub-array elements concatenated into it recursively up to the specified depth.
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat
- The map() method creates a new array with the results of calling a function for every array element.
https://www.w3schools.com/jsref/jsref_map.asp
<Message error>
    <Message.Header>{error.statusText}</Message.Header>
    {error.data && Object.keys(error.data.errors).length > 0 && (
    <Message.List>
        {Object.values(error.data.errors)
        .flat()
        .map((err, i) => (
            <Message.Item key={i}>{err}</Message.Item>
        ))}
    </Message.List>
    )}
    {text && <Message.Content content={text} />}
</Message>

26. URL.createObjectURL..
https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL
const onDrop = useCallback(acceptedFiles => {
    setFiles(
      acceptedFiles.map((file: object) =>
        Object.assign(file, { preview: URL.createObjectURL(file) })
      )
    );
  }, []);