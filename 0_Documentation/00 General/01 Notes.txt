
++++++++++++RUN COMMANDS++++++++++++++

Start client
> cd client-app
> npm start

RUN API, VS Code
- Under Terminal, using dotnet cli
- Only works inside the context of the startup project, error in solution level even with -p switch
> cd API
> dotnet watch run

- Specify startup project
- Run:
> dotnet run -p API/

Recommend dotnet cli in creating Projects

Check versions:
> dotnet --info

Help for dotnet cli
> dotnet -h
> dotnet new -h
> dotnet new <shortname>

...

Install packages (must be same as netcore version)
- open command shell (ctrl+shift+p)
- Nuget Package Manager: Add Package
- Add to Project
- Restore pop-up window

++++++++++++EF Codes ADD MIGRATION++++++++++++++
!!!IN SOLUTION LEVEL
!specify -p is the persistence project
!specify -s is the startup project
> dotnet ef migrations add InitialCreate -p Persistence/ -s API/

!updates to the latest migration if no migration is specified
> dotnet ef database update <migration>

!create new migration for seed
-p for datacontext project
-s startup project
> dotnet ef migrations add SeedValues -p Persistence/ -s API/

!Update to a migration
dotnet ef database update <MigrationName> -p Persistence/ -s API/

!Remove last migration
dotnet ef migrations remove -p Persistence/ -s API/ --force

++++++++++++RESETTING DATABASE++++++++++++++
1. Inside VS Code Terminal Window, inside solution folder

2. Drop database
- Specify persistence project and startup project

dotnet ef database drop -p Persistence/ -s API/

3. Re run Api since we have migration setup in startup
dotnet watch run

++++++++++++Newtonsoft Json++++++++++++++
https://www.newtonsoft.com/json/help/html/T_Newtonsoft_Json_JsonPropertyAttribute.htm
- Newtonsoft.Json 12.0.2

Note on camelCase:
- Classes in /Domain/ have properties in PascalCase, 
- this automatically serializes to camelCase when passed out of the Api endpoint
- this is due to the default setting of AddNewtonsoftJson() in the ConfigureServices under startup
services.AddControllers()
    .AddFluentValidation(cfg => cfg.RegisterValidatorsFromAssemblyContaining<Create>())
    .AddNewtonsoftJson();
- We can modify this behavior by setting a JsonProperty Attribute on the property
ex:
[JsonProperty("attendees")]
public ICollection<AttendeeDto> UserActivities { get; set; }

- Or we set the SerializerSettings ContractResolver to DefaultContractResolver
https://www.newtonsoft.com/json/help/html/T_Newtonsoft_Json_Serialization_DefaultContractResolver.htm
services.AddControllers()
    .AddFluentValidation(cfg => cfg.RegisterValidatorsFromAssemblyContaining<Create>())
    .AddNewtonsoftJson(opt =>
    {
        opt.SerializerSettings.ContractResolver = new DefaultContractResolver();
    });

++++++++++++POSTMAN FEATURES++++++++++++++
1. Variables
- under collections > edit
- rightmost tab "Parameters"
- set value for parameter "url"
- usage: {{url}}/api/activities

2. Creating Collections
https://learning.getpostman.com/docs/postman/collections/intro_to_collections/

3. Postman Tests
https://learning.getpostman.com/docs/postman/scripts/test_examples/

3.1. ex. Module 14 Login as bob and save token to env
- Under test tab
const user = pm.response.json();

pm.test("Has properties", function () {
    pm.expect(user).to.have.property('displayName');
    pm.expect(user).to.have.property('username');
    pm.expect(user).to.have.property('image');
    pm.expect(user).to.have.property('token');
});

if (pm.test("Has properties")) {
    pm.globals.set('token', user.token);
}

pm.test("Global token has been set", function() {
    var token = pm.globals.get('token');
    pm.expect(token).to.eql(user.token);
});

- This would set a global variable in Postman if it does not exist

3.2. Under the settings button upper right (Environment), Globals button
- we can access the global variables that were set

3.3. sending the request will trigger the script

3.4 Usage: 
Get Activities
{{url}}/api/activities
- in Headers tab we have value for the Authorization key as: 
Bearer {{token}}

4. Dynamic variables
- Used in create Activity
https://learning.getpostman.com/docs/postman/environments_and_globals/variables/#dynamic-variables
{{$guid}} : Adds a v4 style guid
https://stackoverflow.com/questions/37851383/what-is-guid-used-for-in-postman

5. Attaching Files (Photos)
ex. (Module 16)
- Add Photo Postman Request
Verify under Body Tab, form-data radio button is selected
	This will enable us to attach files
	Key Should be of the same value that the Command Parameter is named
	ex. IFormFile File, then key in Postman should be named "File"

++++++++++++DEBUGGING IN VS CODE++++++++++++++
1. Verify in .vscode/launch.json
{
    "name": ".NET Core Attach",
    "type": "coreclr",
    "request": "attach",
    "processId": "${command:pickProcess}"
}

2. In Debug Tab, select .Net Core Attach in dropdown
- .Net Core Launch will start a new instance

3. Debug. Search for Api.dll, api.exe

4. Note on [ApiController] attribute
- This throws its own errors hence breakpoitn might not trigger
- comment out [ApiController] for verification

5. Verify values under Variables/Locals/

++++++++++++DEBUGGING Client Side++++++++++++++
1. Debugger for Chrome 4.12.1
added under .vscode\launch.json
"configurations": [
    {
      "name": "Chrome Debugger",
      "type": "chrome",
      "request": "launch",
      "url": "http://localhost:3000",
      "webRoot": "${workspaceFolder}/src"
    },
	...
++++++++++++API SECURITY++++++++++++++

1. TokenValidationParameters
https://docs.microsoft.com/en-us/dotnet/api/microsoft.identitymodel.tokens.tokenvalidationparameters?view=azure-dotnet
- ValidateAudience - Validation of the audience, mitigates forwarding attacks. For example, a site that receives a token, could not replay it to another side.
- ValidateIssuer - Gets or sets a String that represents a valid issuer that will be used to check against the token's issuer.

2. Policy-based authorization
- Used in /Infrastructure/Security/IsHostRequirement.cs
https://docs.microsoft.com/en-us/aspnet/core/security/authorization/policies?view=aspnetcore-3.0

++++++++++++++User Secrets++++++++++++++
1. In the Api.csproj file add User Secrets id
- ex. copy existing Guid from an Activity id
<PropertyGroup>
    <TargetFramework>netcoreapp3.0</TargetFramework>
	<UserSecretsId>a09d8666-de6a-45b7-82ae-69e8d8e33cd1</UserSecretsId>
</PropertyGroup>

2. In VS Code terminal, Solution level
-p : specify startup project
dotnet user-secrets set "TokenKey" "super secret key" -p API/

++++++++++++++Configure user secrets for Production++++++++++++++
- populate all user secrets in appsettings.json
> cd api
> dotnet user-secrets list


++++++++++++AutoMapper++++++++++++++
https://automapper.org/
- same author as MediatR
- AutoMapper.Extensions.Microsoft.DependencyInjection 7.0.0

ex. CreateMap<Activity, ActivityDto>();
- Convention based, 
- any properties that has the same name, will automatically be mapped
- no code needed

++++++++++++++Custom Value Resolver++++++++++++++
https://docs.automapper.org/en/stable/Custom-value-resolvers.html

++++++++++++Ordering of Services in ConfigureServices++++++++++++++
https://stackoverflow.com/questions/55706344/what-is-correct-order-to-addcors-into-net-core

As a general rule, the MVC middleware almost always should come last.

https://docs.microsoft.com/en-us/aspnet/core/migration/22-to-30?view=aspnetcore-3.0&tabs=visual-studio#startup-changes
For most apps, calls to UseAuthentication, UseAuthorization, and UseCors must appear between the calls to UseRouting and UseEndpoints to be effective.

++++++++++++Notes from IsHostRequirementHandler.cs++++++++++++++

++++++++Authorization Handler++++++++
https://jakeydocs.readthedocs.io/en/latest/security/authorization/policies.html?highlight=authorizationhandler
An authorization handler is responsible for the evaluation of any properties of a requirement. The authorization 
handler must evaluate them against a provided AuthorizationContext to decide if authorization is allowed.

++++++++IHttpContextAccessor usage++++++++
http://rion.io/2016/01/04/accessing-identity-info-using-dependency-injection-in-net-5/
https://www.c-sharpcorner.com/article/using-httpcontext-outside-an-mvc-controller-in-net-core-2-1/
https://www.c-sharpcorner.com/article/a-better-approach-to-access-httpcontext-outside-a-controller-in-net-core-2-1/

1. Getting username from claims inside httpcontext 
private readonly IHttpContextAccessor _httpContextAccessor;

public UserAccessor(IHttpContextAccessor httpContextAccessor)
{
    _httpContextAccessor = httpContextAccessor;
}
...
public string GetCurrentUserName()
{
    var username = _httpContextAccessor.HttpContext.User?.Claims?
        .FirstOrDefault(x => x.Type == ClaimTypes.NameIdentifier)?.Value;
    return username;
}

++++++++Use HttpContext from custom components++++++++
https://docs.microsoft.com/en-us/aspnet/core/fundamentals/http-context?view=aspnetcore-3.0#use-httpcontext-from-custom-components

++++++++Getting values via RouteData in AuthorizationFilterContext++++++++
https://jakeydocs.readthedocs.io/en/latest/security/authorization/policies.html
- 
if (context.Resource is AuthorizationFilterContext authContext) {
	...
	var activityId = authContext.RouteData.Values["id"].ToString();
	var activity = _context.Activities.FindAsync(activityId).Result;
	...

++++++++Web based Data Modeler++++++++
https://www.vertabelo.com/


+++++++++++++++++IQueryable+++++++++++++++++

1. Query variables stores query commands
2. IQueryable<T>
- Creates an expression tree
3. Execution is deferred until iteration
- Foreach loop
- ToList(), ToArray(), ToDictionary()
- Singleton queries (Count, Average etc)

Queryable Example:
- Build the query
- Create an expression tree:
var queryable = _context.Activities
	.Where(x => x.Date >= request.StartDate)
	.OrderBy(x => x.Date
	.AsQueryable();

- Use the queryable, we can add more expressions
- in this case set: Skip 0 records, Take 3 records
- Execute the queryable (using .ToListAsync())
var activities = await queryable
	.Skip(request.Offset ?? 0)
	.Take(request.Limit ?? 3)
	.ToListAsync();

++++++++++++++JWT Token++++++++++++++
- \Infrastructure\Security\JwtGenerator.cs
- JWT token located under local storage
- f12 > Application Tab > Storage on left panel > Local Storage

++++++++++++++ConnectionString samples++++++++++++++
https://www.connectionstrings.com/

sqlite
  "ConnectionStrings": {
    "DefaultConnection": "Data source=reactivities.db"
  },

mySql
  "ConnectionStrings": {
    "DefaultConnection": "Server=localhost; Database=reactivities; Uid=appuser; Pwd=Password@1"
  },


++++++++++++++Setup for Production++++++++++++++
- Modify launchSettings in Api
\API\Properties\launchSettings.json
- Under Api change "Development" to "Production"
"API": {
    "commandName": "Project",
    "launchBrowser": true,
    "launchUrl": "weatherforecast",
    "applicationUrl": "http://localhost:5000",
    "environmentVariables": {
    "ASPNETCORE_ENVIRONMENT": "Production"
    }