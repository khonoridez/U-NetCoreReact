
+++++++++++++Outline+++++++++++++

1. Photo Storage options
1.1 Database
- Inefficient
- Stores files as Blob (Binary Large Object)
- Disk space is an issue
- Authentication is easy

1.2 File System
- Good for storing files
- Disk space is an issue
- File permissions

1.3 Cloud service
https://cloudinary.com/
- Scalable
- Could be more expensive
- Secured with Api key

2. Adding photo accessor

+++++++++++++Setup Cloudinary+++++++++++++

1. In cloudinary dashboard get creds
In Vs Code
- cd Api/
dotnet user-secrets set "Cloudinary:CloudName" "<Cloud Name>"
dotnet user-secrets set "Cloudinary:ApiKey" "<Api Key>"
dotnet user-secrets set "Cloudinary:ApiSecret" "<Api Secret>"

2. Create class CloudinarySettings 
- in /Infrastructure/Photos/CloudinarySettings.cs
- properties has to match properties saved in user secrets

public string CloudName { get; set; }
public string ApiKey { get; set; }
public string ApiSecret { get; set; }

3. Setup in Startup.cs
public void ConfigureServices(IServiceCollection services)
{
    ...
    services.Configure<CloudinarySettings>(Configuration.GetSection("Cloudinary"));
	...

4. Install Cloudinary SDK
https://cloudinary.com/documentation/dotnet_integration#installation
...
using CloudinaryDotNet;
using CloudinaryDotNet.Actions;
- Install in Infrastructure Project
- CloudinaryDotNet 1.8.0
- Add to Infrastructure Project

5. Create interface for DI
- /Application/Interfaces/IPhotoAccessor.cs
- We will create a class PhotoUploadResult to store the return type of Cloudinary object
public interface IPhotoAccessor
{
    PhotoUploadResult AddPhoto(IFormFile file);
    string DeletePhoto(string publicId);
}

6. Add file /Application/Photos/PhotoUploadResult.cs
public class PhotoUploadResult
{
    public string PublicId { get; set; }
    public string Url { get; set; }
}

7. Create concrete class of PhotoAccessor
- In /Infrastructure/Photos/PhotoAccessor.cs
public class PhotoAccessor : IPhotoAccessor
{
    public PhotoUploadResult AddPhoto(IFormFile file)
    {
        throw new System.NotImplementedException();
    }

    public string DeletePhoto(string publicId)
    {
        throw new System.NotImplementedException();
    }
}

8. Specify the DI in Startup.cs
services.AddScoped<IPhotoAccessor, PhotoAccessor>();
