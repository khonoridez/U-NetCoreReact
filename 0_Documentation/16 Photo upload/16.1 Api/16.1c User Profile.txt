
+++++++++++++User Profile+++++++++++++

1. Create new file /Application/Profiles/Profile.cs
public class Profile
{
    public string DisplayName { get; set; }
    public string UserName { get; set; }
    public string Image { get; set; }
    public string Bio { get; set; }
    public ICollection<Photo> Photos { get; set; }
}

2. Create Handler for Details (Query Handler)
- /Application/Profiles/Details.cs
- type qhandler for snippet
- Profile as the Type parameter

public class Query : IRequest<Profile>
...

3. Create Property for the handler parameter
public class Query : IRequest<Profile>
{
    public string Username { get; set; }
}

4. Implement Handle method
- Get the user
- Return a Profile object from the User
public async Task<Profile> Handle(Query request, CancellationToken cancellationToken)
{
    var user = await _context.Users.SingleOrDefaultAsync(u => u.UserName == request.Username);

    return new Profile
    {
        DisplayName = user.DisplayName,
        Username = user.UserName,
        Image = user.Photos.FirstOrDefault(p => p.IsMain)?.Url,
        Photos = user.Photos,
        Bio = user.Bio
    };
}

5. Create Controller, Api endpoint
public class ProfilesController : BaseController
{
    [HttpGet("{username}")]
    public async Task<ActionResult<Profile>> Get(string username)
    {
        return await Mediator.Send(new Details.Query { Username = username });
    }
}

6. Test in Postman (Module 16)
- Get Profile, {{url}}/api/profiles/bob
- Verify colection of Photos

+++++++++++++Set Main Photo+++++++++++++

1. Create Handler /Application/Photos/SetMain.cs
- type chandler for snippet
- add Id as parameter
public class Command : IRequest
{
    public string Id { get; set; }
}

2. Inject user accessor
private readonly DataContext _context;
private readonly IUserAccessor _userAccessor;

public Handler(DataContext context, IUserAccessor userAccessor)
{
    _context = context;
    _userAccessor = userAccessor;
}

3. Implement handler method
- Get user
- Get Photo
- Get current main photo
- set current main to false
- set new photo main to true

public async Task<Unit> Handle(Command request, CancellationToken cancellationToken)
{
    var user = await _context.Users.SingleOrDefaultAsync(
        u => u.UserName == _userAccessor.GetCurrentUserName());

    var photo = user.Photos.FirstOrDefault(p => p.Id == request.Id);

    if (photo == null)
        throw new RestException(HttpStatusCode.NotFound, new { Photo = "Not found" });

    var currentMain = user.Photos.FirstOrDefault(p => p.IsMain);
    currentMain.IsMain = false;
    photo.IsMain = true;

    var success = await _context.SaveChangesAsync() > 0;

    if (success) return Unit.Value;

    throw new Exception("Problem saving changes");
}

4. Create Api Endpoing in Controller
PhotosController.cs
[HttpPost("{id}/setmain")]
public async Task<ActionResult<Unit>> SetMain(string id)
{
    return await Mediator.Send(new SetMain.Command { Id = id });
}

+++++++++++++Populate Image Url+++++++++++++
1. Set in Login Handler
- In /Application/User/Login.cs

if (result.Succeeded)
{
    return new User
    {
        ...
        Image = user.Photos.FirstOrDefault(p => p.IsMain)?.Url
    };
}

2. Set in Register Handler
- In /Application/User/Register.cs
- No facility yet in Register UI to upload photo

if (result.Succeeded)
{
    return new User
    {
        ...
        Image = user.Photos.FirstOrDefault(p => p.IsMain)?.Url
    };
}

3. Current User Handler
- In /Application/User/CurrentUser.cs

4. AttendeeDTO
- In /Application/Activities/MappingProfile.cs
	CreateMap<UserActivity, AttendeeDto>()
		.ForMember(d => d.Image, o => o.MapFrom(s => s.AppUser.Photos.FirstOrDefault(p => p.IsMain).Url));

5. Test in Postman, 
- Get Activities, Attendees should show image url
