
+++++++++++++User Profile+++++++++++++

1. Create new file /Application/Profiles/Profile.cs
public class Profile
{
    public string DisplayName { get; set; }
    public string UserName { get; set; }
    public string Image { get; set; }
    public string Bio { get; set; }
    public ICollection<Photo> Photos { get; set; }
}

2. Create Handler for Details (Query Handler)
- /Application/Profiles/Details.cs
- type qhandler for snippet
- Profile as the Type parameter

public class Query : IRequest<Profile>
...

3. Create Property for the handler parameter
public class Query : IRequest<Profile>
{
    public string Username { get; set; }
}

4. Implement Handle method
- Get the user
- Return a Profile object from the User
public async Task<Profile> Handle(Query request, CancellationToken cancellationToken)
{
    var user = await _context.Users.SingleOrDefaultAsync(u => u.UserName == request.Username);

    return new Profile
    {
        DisplayName = user.DisplayName,
        Username = user.UserName,
        Image = user.Photos.FirstOrDefault(p => p.IsMain)?.Url,
        Photos = user.Photos,
        Bio = user.Bio
    };
}

5. Create Controller, Api endpoint
public class ProfilesController : BaseController
{
    [HttpGet("{username}")]
    public async Task<ActionResult<Profile>> Get(string username)
    {
        return await Mediator.Send(new Details.Query { Username = username });
    }
}

6. Test in Postman (Module 16)
- Get Profile, {{url}}/api/profiles/bob
- Verify colection of Photos