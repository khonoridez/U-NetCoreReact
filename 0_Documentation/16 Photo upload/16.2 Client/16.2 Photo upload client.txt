
+++++++++++++Outline+++++++++++++

1. Profile page
2. Displaying user photos
3. Photo upload widget
4. React Dropzone
5. React Cropper
6. Setting main/delete photos

+++++++++++++Upload+++++++++++++

+++++++++++++Button, View Toggles+++++++++++++
- Enable only if you are looking at your own profile
- Get the current logged in user in userStore
- Then get the user in profileStore, if both match then enable edit

1. In profileStore declare a computed property isCurrentUser
@computed get isCurrentUser() {
    if (this.rootStore.userStore.user && this.profile) {
      return this.rootStore.userStore.user.username === this.profile.username;
    } else {
      return false;
    }
  }

2. Implement Upload in ProfilePhotos
const { profile, isCurrentUser } = rootStore.profileStore;
const [addPhotoMode, setAddPhotoMode] = useState(false);

3. Adjust Styles
- Utilize Grid
<Grid>
    <Grid.Column width={16} style={{ paddingBottom: 0 }}>
        <Header floated="left" icon="image" content="Photos" />

+++++++++++++Photo Upload Widget+++++++++++++
1. Create file /src/app/common/photoUpload/PhotoUpload.tsx
- type s_17.8.1 snippet
- Grid Columns, containing 3 steps
- Remove export on named import (on top)
- export default is at bottom
Step 1 - Add Photo
Step 2 - Resize image
Step 3 - Preview & Upload

2. Add Photo Widget to ProfilePhotos
{addPhotoMode ? (
    <PhotoUploadWidget />
    ) : (

3. Implement an Active Index on tab under Profile Content
<Tab
    menu={{ fluid: true, vertical: true }}
    menuPosition="right"
    panes={panes}
    activeIndex={1}
/>

4. Default setAddPhotoMode to true (temporarily for dev)
const [addPhotoMode, setAddPhotoMode] = useState(true);

+++++++++++++React Dropzone+++++++++++++
1. Install React Dropzone
- cd client-app
- npm install react-dropzone

2. Add new file /src/app/common/photoUpload/PhotoWidgetdropzone.tsx
copy paste code from sample Usage
https://github.com/react-dropzone/react-dropzone
- rename fields, properties

3. Pass files coming from PhotoWidgetDropzone (acceptedFiles) to PhotoUploadWidget
3.1 In PhotoUploadWidget create local variables via useState
- files will represent the "acceptedFiles" that was dropped
const PhotoUploadWidget = () => {
	const [files, setFiles] = useState([]);
	...
3.2 Pass this to the PhotoWidgetDropzone
<PhotoWidgetDropzone setFiles={setFiles} />

3.3 Catch in PhotoWidgetDropzone via IProps
interface IProps {
  setFiles: (files: object[]) => void;
}

const PhotoWidgetDropzone: React.FC<IProps> = ({ setFiles }) => {
...

3.4 Use in onDrop change
- setFiles will get all files that was dropped and via map, will set a new property "preview" using 
URL.createObjectURL(..)
https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL

const onDrop = useCallback(acceptedFiles => {
    setFiles(
      acceptedFiles.map((file: object) =>
        Object.assign(file, { preview: URL.createObjectURL(file) })
      )
    );
  }, []);

3.5. Place this inside an <Image /> back to PhotoUploadWidget
<Grid.Column width={4}>
    ...
    {files.length > 0 && <Image src={files[0].preview} />}
</Grid.Column>

+++++++++++++Styling React Dropzone+++++++++++++
- Style Box and icon inside
1. declare dropzone styles in a variable
const dropzoneStyles = {
  border: "dashed 3px",
  borderColor: "#eee",
  borderRadius: "5px",
  paddingTop: "30px",
  textAlign: "center",
  height: "200px"
};

const dropzoneActive = {
  borderColor: "green"
};

2. Implement in the first div
- if isDragActive then spread all props from dropzoneStyles and then spread all props from dropzoneActive
- if not just get dropzoneStyles
<div
    {...getRootProps()}
    style={
    isDragActive ? { ...dropzoneStyles, ...dropzoneActive } : dropzoneStyles
    }
>
...

!!! Error Type '{ textAlign: string;...... }' is not assignable to type 'CSSProperties'.
  Types of property 'textAlign' are incompatible.
 Resolution: add  as "center"
 const dropzoneStyles = {
  ...
  textAlign: "center" as "center",
};

+++++++++++++Clear Memory Leak on URL.createObjectURL(file)+++++++++++++
- Use an equivalent on class component, componentWillUnmount
1. Create useEffect for cleanup
